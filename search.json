[{"path":"/articles/deconfounding.html","id":"context","dir":"Articles","previous_headings":"","what":"Context","title":"Deconfounding","text":"want explore different types confounding impact PLMMs — questions mind include: PLMM perform well? perform poorly? PLMM compare PCA different data contexts? PLMM uses PCs fixed effects – sense, ‘hybrid’ approach – way approach deconfounding data complex structure?","code":""},{"path":"/articles/deconfounding.html","id":"starting-with-some-test-data","dir":"Articles","previous_headings":"","what":"Starting with some test data","title":"Deconfounding","text":"Let’s compare three lasso models: glmnet, plmm linear predictor (default), plmm BLUP option.","code":"gb <- function(n=100, p=256, s=4, gamma=6, beta=2, B=20) {   mu <- matrix(rnorm(B*p), B, p)   z <- rep(1:B, each=n/B)   X <- matrix(rnorm(n*p), n, p) + mu[z,] |>     ncvreg::std()   b <- rep(c(beta, 0), c(s, p-s))   g <- seq(-gamma, gamma, length=B)   y <- X %*% b + g[z]   Z <- model.matrix(~0+factor(z))   list(y=y, X=X, beta=b, Z=Z, gamma=g, mu=mu, id=z) } l <- gb() cvg <- cv.glmnet(l$X, l$y) cvp <- cv_plmm(l$X, l$y, penalty='lasso') cvp_blup <- cv_plmm(l$X, l$y, penalty='lasso',                     type = 'blup',                     returnBiasDetails = TRUE)  # look at K -- note that this data scenario has a 'finer' population structure library(corrplot) corrplot(relatedness_mat(l$X), is.corr = F, tl.pos = \"n\")"},{"path":"/articles/deconfounding.html","id":"mspe","dir":"Articles","previous_headings":"Starting with some test data","what":"MSPE","title":"Deconfounding","text":"mean squared prediction error glmnet plmm, adding blup option makes improvement:","code":"min(cvg$cvm) min(cvp$cve) min(cvp_blup$cve)"},{"path":"/articles/deconfounding.html","id":"mse","dir":"Articles","previous_headings":"Starting with some test data","what":"MSE","title":"Deconfounding","text":"mean squared error, see β̂\\hat \\beta better plmm","code":"crossprod(l$beta - coef(cvg)[-1]) |> drop() crossprod(l$beta - coef(cvp)[-1]) |> drop() crossprod(l$beta - coef(cvp_blup)[-1]) |> drop()"},{"path":[]},{"path":"/articles/filebacking.html","id":"step-1-preprocess-the-data","dir":"Articles","previous_headings":"Analyzing filebacked data from start to finish","what":"Step 1: preprocess the data","title":"Analyze high-dimensional PLINK data with filebacking","text":"important step begin – GWAS data, tell plmmr combine information across three PLINK files (.bed, .bim, .fam files). , create files want temporary directory just sake example. Users can specify folder choice rds_dir, shown : ’ll see lot messages printed console … result creation 3 files: std_penncath_lite.rds std_penncath_lite.bk contain data, process_plink.log text file documenting steps just done. show folder PLINK data ; file path .rds object returned plink_data can examine ’s std_penncath_lite.rds using snp_attach() function bigsnpr package:","code":"temp_dir <- paste0(tempdir()) # using a temporary directory (if you didn't already create one above)  plink_data <- process_plink(data_dir = find_example_data(parent = TRUE),                             # ^ reads data from inst/extdata; change this to match where your data files are               rds_dir = temp_dir,               prefix = \"penncath_lite\",               overwrite = TRUE,               impute_method = \"mode\") pen <- readRDS(plink_data) str(pen) # note: genotypes and std_X are *not* in memory #  # we can check to see that our data have been standardized  std_X <- attach.big.matrix(pen$std_X) colMeans(std_X[,]) |> summary() # columns have mean zero... apply(std_X[,], 2, var) |> summary() # ... & variance 1"},{"path":"/articles/filebacking.html","id":"what-if-my-data-arent-in-plink-format","dir":"Articles","previous_headings":"Analyzing filebacked data from start to finish > Step 1: preprocess the data","what":"What if my data aren’t in PLINK format?","title":"Analyze high-dimensional PLINK data with filebacking","text":"methodology plmmr motivated applications GWAS, certainly isn’t limited context. Suppose high dimensional data set, colon2 data – like colon data ships biglasso package, ’ve inserted NA values just didactic purposes.","code":"colon_data <- process_delim(file = \"colon2.txt\",           data_dir = find_example_data(parent = TRUE),           rds_dir = temp_dir,           ind.col = 2:2002) # don't use the 1st column; it has IDs in it  std_colon2 <- readRDS(file = colon_data) str(std_colon2) # notice that the columns with NA values were dropped"},{"path":"/articles/filebacking.html","id":"step-2-fit-a-model","dir":"Articles","previous_headings":"Analyzing filebacked data from start to finish","what":"Step 2: fit a model","title":"Analyze high-dimensional PLINK data with filebacking","text":"Note: data coming process_plink(), y argument plmm() defaults using 6th column ‘.fam’ file phenotype/outcome (behavior PLINK ). can confirm filebacked methods -memory methods give results: format similar data came process_delim – however, case colon2 data, need supply kinship matrix. data genomic, estimating genomic relatedness matrix doesn’t make sense. purposes, make ‘dummy’ K matrix.","code":"fb_fit <- plmm(X = plink_data,                returnX = FALSE,                # this datset is small enough to fit in memory                # by setting returnX = FALSE, I force plmm() to run on the filebacked data                save_rds = file.path(temp_dir, \"fb_fit\"),                # save results to my temp directory, and name files 'fb_fit'                trace = TRUE) fit <- plmm(X = plink_data, # will run in-memory by default, since data will fit             trace = TRUE)  b1 <- fb_fit$beta_vals |> as.matrix() b2 <- fit$beta_vals tinytest::expect_equivalent(b1, b2, 0.01) # pretend genomic data from 500 SNPs genomic_dat <- matrix(sample(0:2, 62*500, replace = TRUE), nrow = 62, ncol = 500) K <- relatedness_mat(genomic_dat) pretend_outcome <- rnorm(62) # notice: this is a completely made-up outcome # depending on the seed used for this rnorm() call, results may look aberrant/'weird' colon2_fit <- plmm(X = file.path(temp_dir, \"std_colon2\"),                    y = pretend_outcome,                    K = K,                    returnX = FALSE,                    trace = TRUE)  plot(colon2_fit)"},{"path":"/articles/filebacking.html","id":"step-3-plotsummarize-results","dir":"Articles","previous_headings":"Analyzing filebacked data from start to finish","what":"Step 3: Plot/summarize results","title":"Analyze high-dimensional PLINK data with filebacking","text":"summarize single model (CV), can look plot coefficient paths: can also examine number selected variables particular index λ\\lambda:","code":"plot(fb_fit) summary(fb_fit, idx = 50)"},{"path":"/articles/filebacking.html","id":"step-4-cross-validation-tuning-parameter-selection","dir":"Articles","previous_headings":"Analyzing filebacked data from start to finish","what":"Step 4: Cross-validation (tuning parameter selection)","title":"Analyze high-dimensional PLINK data with filebacking","text":"applications, want fit model using cross validation order choose appropriate value λ\\lambda, tuning parameter penalized model. Fitting equivalent model using penncath_lite data uses RAM look like : summarize plot CV fit, can look plot cross validation error: summarize visualize model chosen λ\\lambda parameter value, can :","code":"cv_fb_fit <- cv_plmm(X = plink_data,                      type = 'blup',                      returnX = FALSE,                      nfolds = 3, # for sake of testing, I made this small.                       # In practice, 3 folds is usually not enough for robust                       # cross validation - hence, the default is nfolds = 5                      returnBiasDetails = TRUE,                      trace = TRUE,                      save_rds = file.path(plink_data,                                           \"cv\"), # save_results to save folder as data                       save_fold_res = TRUE, # saves loss and predictions in each fold                      compact_save = TRUE, # saves results in separate files                      seed = 123) cv_fit <- cv_plmm(X = plink_data,                   type = 'blup',                   nfolds = 3,                   returnBiasDetails = TRUE,                   trace = TRUE,                   seed = 123)  print(summary(cv_fit)) plot(cv_fit) tinytest::expect_equivalent(cv_fb_fit$cve, cv_fit$cve, tolerance = 0.01) plot(cv_fb_fit) summary(cv_fb_fit)"},{"path":"/articles/filebacking.html","id":"comparing-candidate-models","dir":"Articles","previous_headings":"Analyzing filebacked data from start to finish","what":"Comparing candidate models","title":"Analyze high-dimensional PLINK data with filebacking","text":"default penalty plmmr lasso. Another option minimax-concave penalty (MCP)[^2]. Suppose want compare lasso-penalized model results MCP-penalized model. can fit lasso model shown:","code":"fb_mcp <- plmm(X = plink_data,                  penalty = \"MCP\",                  returnX = FALSE,                  trace = TRUE)  plot(fb_mcp) summary(fb_mcp, idx = 50)"},{"path":"/articles/filebacking.html","id":"to-add-predictors-that-are-not-genomic","dir":"Articles","previous_headings":"Analyzing filebacked data from start to finish","what":"To add predictors that are not genomic","title":"Analyze high-dimensional PLINK data with filebacking","text":"many biological applications, want include features/covariates/predictors addition genomic information, like clinical demographic information. Let’s suppose penncath data analysis, want include ‘sex’ ‘age’ unpenalized covariates. can supplying additional argument process_plink(): usually want kinds variables always model (.e., penalized). make sure ‘sex’ ‘age’ always included chosen model, let’s set penalty_factor 0 values corresponding predictors. can check additional covariates impact model fit:","code":"# create a new temporary directory, to avoid over-writing saved results temp_dir2 <- paste0(tempdir(), sample(LETTERS, 1)) unzip_example_data(outdir = temp_dir2) # change this line if you're working on Windows  pen_clinic <- read.csv(paste0(find_example_data(parent = TRUE), \"/penncath_clinical.csv\")) extdata <- pen_clinic[,3:4] rownames(extdata) <- pen_clinic$FamID # This is important!   # create a new temporary directory new_plink_data <- process_plink(data_dir = temp_dir2,               # again, adjust this to wherever you've got the unzipped PLINK data               rds_dir = temp_dir2, # using a temporary directory               prefix = \"penncath_lite\",               id_var = \"FID\", # this is KEY!               outfile = file.path(temp_dir2,\"process_penncath_addvar\"),               impute_method = \"mode\",               add_predictor_ext = extdata)  # check this out:  pen2 <- readRDS(new_plink_data) pen2$std_X_colnames |> head() # std_X includes our non-genomic covariates  pen2$std_X <- bigmemory::attach.big.matrix(pen2$std_X) fit_plus_newvars <- plmm(X = new_plink_data,                          penalty_factor = c(0, 0, rep(1, ncol(pen2$std_X) - 2)),                          K = fb_fit$K,                           returnX = FALSE,                          trace = TRUE) plot(fit_plus_newvars)  summary(fb_fit, idx = 1)  summary(fit_plus_newvars, idx = 1) # at highest penalty value, sex and age are still in the model  # look at the estimated coefficients  fb_fit$beta_vals[1:10, 1:5] fit_plus_newvars$beta_vals[1:10, 1:5]"},{"path":"/articles/getting-started.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Getting started with plmm","text":"plmmr (stands Penalized Linear Mixed Models R) R package created purpose fitting penalized regression models high dimensional data, particularly observations correlated. kind data arises often context genetics (e.g. GWAS dealing population structure/family structure), motivation examples presented . time, package designed linear regression – , considering continuous (numeric) outcomes. many applications high dimensional data, objective statistical models identify signals - example, many GWAS interested identifying set variants show evidence association outcome. Practitioners situations often interested identifying biological pathways estimating odds ratios individual variants. applications, treating binary categorical outcomes numeric values possibility. future, like extend package handle logistic regression (handle dichotomous outcomes). Since focused penalized regression package, plmmr offers 3 choices penalty: minimax concave (MCP), smoothly clipped absolute deviation (SCAD), least absolute shrinkage selection operator (LASSO). 1 Much work package built concepts/techniques provided ncvreg package Patrick Breheny. filebacked computation relies bigsnpr package Florian Privé biglasso package Yaohui Zeng & colleagues. plmmr currently includes two example data sets: admix small data set (197 observations, 100 SNPs) describes individuals different ancestry groups. outcome admix simulated include population structure effects (.e. race/ethnicity impact SNP associations). data set available .rda object data/ folder. penncath_lite (data coronary artery disease PennCath study) mid-sized, high dimensional data set (1401 observations, 4217 SNPs) several health outcomes well age sex information. data set subset much larger data set (original data 800K SNPs). information data set, refer original publication. overview, provide demo main functions plmmr using admix data. Checkout ‘Working PLINK files’ vignette see demo processing penncath_lite data original PLINK file formats.","code":""},{"path":"/articles/getting-started.html","id":"basic-model-fitting","dir":"Articles","previous_headings":"","what":"Basic model fitting","title":"Getting started with plmm","text":"admix data already formatted elements XX yy, can jump right call plmmr::plmm() (main function): returned beta_vals item matrix whose rows β̂\\hat\\beta coefficients whose columns represent values penalization parameter λ\\lambda. default, plmm fits 100 values λ\\lambda (see setup_lambda function details). Note values λ\\lambda, SNP 8 β̂=0\\hat \\beta = 0. SNP 8 constant feature, feature (column) whose values vary among members population. can summarize fit nth λ\\lambda value: can also plot path fit see model coefficients vary λ\\lambda: Plot path model fit Suppose also know ancestry groups person admix data self-identified. probably want include model unpenalized covariate (.e., want ‘ancestry’ always model). look:","code":"admix_fit <- plmm(X = admix$X, y = admix$y) summary(admix_fit, lambda = admix_fit$lambda[50]) #> lasso-penalized regression model with n=197, p=101 at lambda=0.01380 #> ------------------------------------------------- #> The model converged  #> ------------------------------------------------- #> # of non-zero coefficients:  85  #> ------------------------------------------------- admix_fit$beta_vals[1:10, 97:100] |>    knitr::kable(digits = 3,                format = \"html\") # for n = 25  summary(admix_fit, lambda = admix_fit$lambda[25]) #> lasso-penalized regression model with n=197, p=101 at lambda=0.07896 #> ------------------------------------------------- #> The model converged  #> ------------------------------------------------- #> # of non-zero coefficients:  46  #> ------------------------------------------------- plot(admix_fit) X_plus_ancestry <- cbind(admix$race, admix$X) colnames(X_plus_ancestry) <- c(\"ancestry\", colnames(admix$X)) admix_fit2 <- plmm(X = X_plus_ancestry, y = admix$y,                    penalty = \"lasso\",                    non_genomic = 1, # mark ancestry variable as non-genomic                     # make the penalty factor 0 to keep the corresponding covariate unpenalized                    penalty_factor = c(0, rep(1, ncol(admix$X))))  summary(admix_fit2, idx = 95) #> lasso-penalized regression model with n=197, p=102 at lambda=0.00077 #> ------------------------------------------------- #> The model converged  #> ------------------------------------------------- #> # of non-zero coefficients:  99  #> ------------------------------------------------- plot(admix_fit2)"},{"path":"/articles/getting-started.html","id":"cross-validation","dir":"Articles","previous_headings":"","what":"Cross validation","title":"Getting started with plmm","text":"select λ\\lambda value, often use cross validation. example using cv_plmm select λ\\lambda minimizes cross-validation error: can also plot cross-validation error (CVE) versus λ\\lambda (log scale): Plot CVE","code":"admix_cv <- cv_plmm(X = X_plus_ancestry, y = admix$y,                     penalty = \"lasso\",                     non_genomic = 1, # mark ancestry variable as non-genomic                     penalty_factor = c(0, rep(1, ncol(admix$X)))) admix_cv_s <- summary(admix_cv, lambda = \"min\") print(admix_cv_s) #> lasso-penalized model with n=197 and p=102 #> At minimum cross-validation error (lambda=0.2035): #> ------------------------------------------------- #>   Nonzero coefficients: 3 #>   Cross-validation error (deviance): 1.17 #>   Scale estimate (sigma): 1.081 plot(admix_cv)"},{"path":"/articles/getting-started.html","id":"predicted-values","dir":"Articles","previous_headings":"","what":"Predicted values","title":"Getting started with plmm","text":"example predict() methods PLMMs: can compare predictions predictions get intercept-model using mean squared prediction error (MSPE) – lower better: see model better predictions null","code":"# make predictions for select lambda value(s) y_hat <- predict(object = admix_fit,                        newX = admix$X,                        type = \"blup\",                        X = admix$X,                        y = admix$y) # intercept-only (or 'null') model crossprod(admix$y - mean(admix$y))/length(admix$y) #>          [,1] #> [1,] 5.928528  # our model at its best value of lambda apply(y_hat, 2, function(c){crossprod(admix$y - c)/length(c)}) -> mse min(mse) #> [1] 0.9259769 # ^ across all values of lambda, our model has MSPE lower than the null model"},{"path":"/articles/notation.html","id":"math-notation","dir":"Articles","previous_headings":"","what":"Math notation","title":"Notes on notation","text":"concepts need denote, order usage derivations. blocked sections corresponding steps model fitting process.","code":""},{"path":"/articles/notation.html","id":"statistical-model-the-overall-framework","dir":"Articles","previous_headings":"Math notation","what":"Statistical model (the overall framework)","title":"Notes on notation","text":"overall model can written 𝐲=𝐗𝛃+𝐙𝛄+𝛜 \\mathbf{y} = \\mathbf{X}\\boldsymbol{\\beta} + \\mathbf{Z}\\boldsymbol{\\gamma} + \\boldsymbol{\\epsilon} equivalently 𝐲=𝐗̇𝛃̇+𝐮+𝛜 \\mathbf{y} = \\dot{\\mathbf{X}}\\dot{\\boldsymbol{\\beta}} + \\mathbf{u} + \\boldsymbol{\\epsilon}  : 𝐗\\mathbf{X} 𝐲\\mathbf{y} n×pn \\times p design matrix data n×1n \\times 1 vector outcomes, respectively. , nn number observations (e.g., number patients, number samples, etc.) pp number features (e.g., number SNPs, number variables, number covariates, etc.). 𝐗̇\\dot{\\mathbf{X}} column-standardized 𝐗\\mathbf{X}, pp columns mean 0 standard deviation 1. Note: 𝐗̇\\dot{\\mathbf{X}} excludes singular features (columns constants) original 𝐗\\mathbf{X}. 𝛃̇\\dot{\\boldsymbol{\\beta}} represents coefficients standardized scale. 𝐙\\mathbf{Z} n×bn \\times b matrix indicators corresponding grouping structure, 𝛄\\boldsymbol{\\gamma} vector values describing grouping associated 𝐲\\mathbf{y}. real data, values typically unknown. 𝛜\\boldsymbol{\\epsilon} n×1n \\times 1 vector noise. define realized (empirical) relatedness matrix 𝐊≡1p𝐗̇𝐗̇⊤\\mathbf{K} \\equiv \\frac{1}{p}\\dot{\\mathbf{X}}\\dot{\\mathbf{X}}^\\top model assumes: 𝛜⊥𝐮\\boldsymbol{\\epsilon} \\perp \\mathbf{u} 𝛜∼N(0,σϵ2𝐈)\\boldsymbol{\\epsilon} \\sim N(0, \\sigma^2_{\\epsilon}\\mathbf{}) 𝐮∼N(0,σs2𝐊)\\mathbf{u} \\sim N(0, \\sigma^2_{s}\\mathbf{K}) assumptions, may write 𝐲∼N(𝐗̇𝛃̇,𝚺)\\mathbf{y} \\sim N(\\dot{\\mathbf{X}}\\dot{\\boldsymbol{\\beta}}, \\boldsymbol{\\Sigma}) Indices: ∈1,...,ni \\1,..., n indexes observations j∈1,...,pj \\1,..., p indexes features h∈1,...,bh \\1,..., b indexes batches (e.g., different family groups, different data collection sites, etc.)","code":""},{"path":"/articles/notation.html","id":"decomposition-and-rotation-prep-and-first-part-of-fit","dir":"Articles","previous_headings":"Math notation","what":"Decomposition and rotation (prep and first part of fit)","title":"Notes on notation","text":"Beginning eigendecomposition, 𝐔\\mathbf{U} 𝐬\\mathbf{s} eigenvectors eigenvalues 𝐊\\mathbf{K}, one obtain eigen(𝐊)≡𝐔𝐒𝐔⊤\\text{eigen}(\\mathbf{K)} \\equiv \\mathbf{U}\\mathbf{S}\\mathbf{U}^\\top. elements 𝐬\\mathbf{s} diagonal values 𝐒\\mathbf{S}. Note, random effect 𝐮\\mathbf{u} distinct columns matrix 𝐔\\mathbf{U}. kk represents number nonzero eigenvalues represented 𝐔\\mathbf{U} 𝐝\\mathbf{d}, k≤min(n,p)k \\leq \\text{min}(n,p). , 𝐊≡1p𝐗̇𝐗̇⊤\\mathbf{K} \\equiv \\frac{1}{p}\\dot{\\mathbf{X}}\\dot{\\mathbf{X}}^{\\top} often referred literature realized relatedness matrix (RRM) genomic relatedness matrix (GRM). 𝐊\\mathbf{K} dimension n×nn \\times n. η\\eta ratio σs2σe2+σs2\\frac{\\sigma^2_s}{\\sigma^2_e + \\sigma^2_s}. estimate η̂\\hat{\\eta} null model (details come). 𝚺\\mathbf{\\Sigma} variance outcome, 𝕍(𝐲)=η𝐊+(1−η)𝐈n\\mathbb{V}({\\mathbf{y}}) = \\eta \\mathbf{K} + (1 - \\eta)\\mathbf{}_n. 𝐰\\mathbf{w} vector weights defined (η𝐬+(1−η))−1/2(\\eta\\mathbf{\\mathbf{s}} + (1-\\eta))^{-1/2}. values 𝐰\\mathbf{w} nonzero values diagonal matrix 𝐖≡(η𝐒+(1−η)𝐈)−1/2\\mathbf{W} \\equiv (\\eta\\mathbf{S} + (1 - \\eta)\\mathbf{})^{-1/2}. matrix used rotating (preconditioning) data 𝚺−1/2≡𝐖𝐔⊤\\mathbf{\\Sigma}^{-1/2} \\equiv \\mathbf{W}\\mathbf{U}^\\top. 𝐗̇̃≡𝐖𝐔⊤𝐗̇\\tilde{\\dot{\\mathbf{X}}} \\equiv \\mathbf{W}\\mathbf{U}^\\top\\dot{\\mathbf{X}} rotated data, data transformed scale. 𝐲̃≡𝚺−1/2𝐲\\tilde{\\mathbf{y}} \\equiv \\mathbf{\\Sigma}^{-1/2}\\mathbf{y} outcome rotated scale. 𝐗̃̈\\ddot{\\tilde{\\mathbf{X}}} standardized rotated data. Note: standardization involves scaling, centering. post-rotation standardization impacts estimated coefficients well; define 𝛃̈{\\ddot{\\boldsymbol{\\beta}}} estimated coefficients scale.","code":""},{"path":"/articles/notation.html","id":"model-fitting-with-penalization","dir":"Articles","previous_headings":"Math notation","what":"Model fitting with penalization","title":"Notes on notation","text":"fit 𝐲̃∼𝐗̃̈\\tilde{\\mathbf{y}} \\sim \\ddot{\\tilde{\\mathbf{X}}} using penalized linear mixed model, obtain 𝛃̈̂\\hat{\\ddot{\\boldsymbol{\\beta}}} estimated coefficients. penalty parameter values (e.g., values lasso tuning parameter) indexed λl∈1,...,t\\lambda_l \\1,..., t.","code":""},{"path":"/articles/notation.html","id":"rescaling-results-format","dir":"Articles","previous_headings":"Math notation","what":"Rescaling results (format)","title":"Notes on notation","text":"obtain estimated coefficients original scale, values estimated model must unscaled (‘untransformed’) twice: adjust post-rotation standardization, adjust pre-rotation standardization. process written 𝛃̈̂→𝛃̇̂→𝛃̂\\hat{\\ddot{\\boldsymbol{\\beta}}} \\rightarrow \\hat{\\dot{\\boldsymbol{\\beta}}} \\rightarrow \\hat{\\boldsymbol{\\beta}}.","code":""},{"path":"/articles/notation.html","id":"object-names-in-source-code","dir":"Articles","previous_headings":"","what":"Object names in source code","title":"Notes on notation","text":"code, denote objects way: 𝐗\\mathbf{X} 𝐲\\mathbf{y} X y 𝐗̇\\dot{\\mathbf{X}} std_X 𝐗̇̃\\tilde{\\dot{\\mathbf{X}}} rot_X 𝐗̃̈\\ddot{\\tilde{\\mathbf{X}}} stdrot_X 𝛃̂\\hat{\\boldsymbol{\\beta}} named og_scale_beta helper functions (clarity) returned plmm objects beta_vals. beta_vals og_scale_beta equivalent; represent estimated coefficients original scale. 𝛃̇̂\\hat{\\dot{\\boldsymbol{\\beta}}} std_scale_beta 𝛃̈̂\\hat{\\ddot{\\boldsymbol{\\beta}}} stdrot_scale_beta 𝐗̇𝛃̇̂\\dot{\\mathbf{X}}\\hat{\\dot{\\boldsymbol{\\beta}}} Xb 𝐗̃̈𝛃̈̂\\ddot{\\tilde{\\mathbf{X}}} \\hat{\\ddot{\\boldsymbol{\\beta}}} linear_predictors. Note: words, means linear_predictors code scale rotated re-standardized data! 𝚺̂≡η̂𝐊+(1−η̂)𝐈\\hat{\\boldsymbol{\\Sigma}} \\equiv \\hat{\\eta}\\mathbf{K} + (1 - \\hat{\\eta})\\mathbf{} estimated_Sigma. Similarly, 𝚺̂11\\hat{\\boldsymbol{\\Sigma}}_{11} Sigma_11, etc.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Anna C. Reisetter. Author. Patrick J. Breheny. Author, maintainer. Tabitha K. Peter. Author. Yujing Lu. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Reisetter , Breheny P (2021). “Penalized linear mixed models structured genetic data.” Genetic epidemiology, 45(5), 427–444. https://doi.org/10.1002/gepi.22384.","code":"@Article{,   author = {Anna C. Reisetter and Patrick Breheny},   title = {Penalized linear mixed models for structured genetic data},   journal = {Genetic epidemiology},   year = {2021},   volume = {45},   pages = {427--444},   number = {5},   url = {https://doi.org/10.1002/gepi.22384}, }"},{"path":"/index.html","id":"plmmr-","dir":"","previous_headings":"","what":"plmmr","title":"Penalized Linear Mixed Models For Correlated Data","text":"plmmr (penalized linear mixed models R) package contains functions fit penalized linear mixed models correct unobserved confounding effects. 🚧🛠️ Note: package still construction 🛠️🚧, package underlying methodology core (Tabitha’s 👷‍♀️) -progress dissertation work. keep page updated make progress. dream package able fit penalized regression models GWAS-scale data.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Penalized Linear Mixed Models For Correlated Data","text":"install latest version package: description motivation functions package (along examples) refer second module GWAS data tutorial","code":"devtools::install_github(\"pbreheny/plmmr\")"},{"path":"/index.html","id":"note-on-branches","dir":"","previous_headings":"","what":"Note on branches","title":"Penalized Linear Mixed Models For Correlated Data","text":"branches repo organized following way: master main branch latest updates. prep_for_script ’ve working improve plmmr functionality writing scripts (e.g., adding log files, etc.) gh_pages keeping documentation plmmr estimate_eta archived branch worked alternative approach estimating η\\eta. ’re keeping around reference writing. sign_flip archived branch examined issues caused +/- signs flipped part truncated SVD.","code":""},{"path":"/reference/MCP.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to implement MCP penalty — MCP","title":"helper function to implement MCP penalty — MCP","text":"helper function implement MCP penalty","code":""},{"path":"/reference/MCP.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to implement MCP penalty — MCP","text":"","code":"MCP(z, l1, l2, gamma, v)"},{"path":"/reference/MCP.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to implement MCP penalty — MCP","text":"z vector representing solution active set feature l1 upper bound (beta) l2 lower bound (beta) gamma tuning parameter MCP penalty v 'xtx' term","code":""},{"path":"/reference/SCAD.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to implement SCAD penalty — SCAD","title":"helper function to implement SCAD penalty — SCAD","text":"helper function implement SCAD penalty","code":""},{"path":"/reference/SCAD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to implement SCAD penalty — SCAD","text":"","code":"SCAD(z, l1, l2, gamma, v)"},{"path":"/reference/SCAD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to implement SCAD penalty — SCAD","text":"z solution active set feature l1 upper bound l2 lower bound gamma tuning parameter SCAD penalty v 'xtx' term","code":""},{"path":"/reference/add_external_phenotype.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to align genotype and phenotype data — add_external_phenotype","title":"A function to align genotype and phenotype data — add_external_phenotype","text":"function align genotype phenotype data","code":""},{"path":"/reference/add_external_phenotype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to align genotype and phenotype data — add_external_phenotype","text":"","code":"add_external_phenotype(   geno,   geno_id = \"sample.ID\",   pheno,   pheno_id,   pheno_col,   outfile )"},{"path":"/reference/add_external_phenotype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to align genotype and phenotype data — add_external_phenotype","text":"geno object created name_and_count_bigsnp() geno_id character string indicating ID column name 'fam' element genotype data list. Defaults 'sample.ID', equivalent 'IID' PLINK. pheno data frame least two columns: ID column phenotype column pheno_id string specifying name ID column pheno pheno_col string specifying name phenotype column pheno. column used default y argument 'plmm()'. outfile string name filepath log file","code":""},{"path":"/reference/add_external_phenotype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to align genotype and phenotype data — add_external_phenotype","text":"","code":"Nothing is returned; instead, the results are written to an RDS file.              By default, the RDS file in `geno` is overwritten. You may change this behavior by specifying a new              filename to `rdsfile`"},{"path":"/reference/add_predictors_to_bigsnp.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to add predictors to a filebacked matrix of data — add_predictors_to_bigsnp","title":"A helper function to add predictors to a filebacked matrix of data — add_predictors_to_bigsnp","text":"helper function add predictors filebacked matrix data","code":""},{"path":"/reference/add_predictors_to_bigsnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to add predictors to a filebacked matrix of data — add_predictors_to_bigsnp","text":"","code":"add_predictors_to_bigsnp(   obj,   add_predictor_fam,   add_predictor_ext,   id_var,   og_plink_ids,   rds_dir,   quiet )"},{"path":"/reference/add_predictors_to_bigsnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to add predictors to a filebacked matrix of data — add_predictors_to_bigsnp","text":"obj bigSNP object add_predictor_fam Optional: want include \"sex\" (5th column .fam file) analysis, specify 'sex' . add_predictor_ext Optional: add additional covariates/predictors/features external file (.e., PLINK file). id_var String specifying column PLINK .fam file unique sample identifiers. Options \"IID\" (default) \"FID\". og_plink_ids Character vector passed name_and_count_bigsnp() rds_dir path directory want create new '.rds' '.bk' files. Defaults data_dir(process_plink() call) quiet Logical: messages printed console? Defaults TRUE","code":""},{"path":"/reference/add_predictors_to_bigsnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to add predictors to a filebacked matrix of data — add_predictors_to_bigsnp","text":"list 2 components: 'obj' - bigSNP object added element representing matrix includes additional predictors first columns 'non_gen' - integer vector ranges 1 number added predictors. Example: 2 predictors added, non_gen = 1:2","code":""},{"path":"/reference/admix.html","id":null,"dir":"Reference","previous_headings":"","what":"Admix: Semi-simulated SNP data — admix","title":"Admix: Semi-simulated SNP data — admix","text":"dataset containing 100 SNPs, demographic variable representing race, simulated outcome","code":""},{"path":"/reference/admix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Admix: Semi-simulated SNP data — admix","text":"","code":"admix"},{"path":"/reference/admix.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Admix: Semi-simulated SNP data — admix","text":"list 3 components X SNP matrix (197 observations 100 SNPs) y vector simulated (continuous) outcomes race vector racial group categorization: # 0 = African, 1 = African American, 2 = European, 3 = Japanese","code":""},{"path":"/reference/admix.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Admix: Semi-simulated SNP data — admix","text":"https://hastie.su.domains/CASI/","code":""},{"path":"/reference/align_famfile_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to support process_plink() This function is called by another helper, add_predictors_to_bigsnp() — align_famfile_ids","title":"A helper function to support process_plink() This function is called by another helper, add_predictors_to_bigsnp() — align_famfile_ids","text":"helper function support process_plink() function called another helper, add_predictors_to_bigsnp()","code":""},{"path":"/reference/align_famfile_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to support process_plink() This function is called by another helper, add_predictors_to_bigsnp() — align_famfile_ids","text":"","code":"align_famfile_ids(id_var, quiet, add_predictor, og_plink_ids)"},{"path":"/reference/align_famfile_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to support process_plink() This function is called by another helper, add_predictors_to_bigsnp() — align_famfile_ids","text":"id_var String specifying variable PLINK file unique id: 'FID' 'IID' quiet Logical: message printed? add_predictor External data include design matrix. add_predictors... arg process_plink() og_plink_ids Character vector PLINK ids (FID IID) original data (.e., data subsetting handling missing phenotypes)","code":""},{"path":"/reference/align_famfile_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to support process_plink() This function is called by another helper, add_predictors_to_bigsnp() — align_famfile_ids","text":"object type add_predictor","code":""},{"path":"/reference/align_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to support process_delim() — align_ids","title":"A helper function to support process_delim() — align_ids","text":"helper function support process_delim()","code":""},{"path":"/reference/align_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to support process_delim() — align_ids","text":"","code":"align_ids(rownames_X, id_var, quiet, add_predictor)"},{"path":"/reference/align_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to support process_delim() — align_ids","text":"rownames_X character vector rownames IDs observations filebacked matrix data id_var character vector values rownames_X quiet Logical: message printed? add_predictor External data include design matrix. add_predictors... arg process_delim()","code":""},{"path":"/reference/align_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to support process_delim() — align_ids","text":"object type add_predictor","code":""},{"path":"/reference/big_cbind.html","id":null,"dir":"Reference","previous_headings":"","what":"a version of cbind() for file-backed matrices — big_cbind","title":"a version of cbind() for file-backed matrices — big_cbind","text":"version cbind() file-backed matrices","code":""},{"path":"/reference/big_cbind.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a version of cbind() for file-backed matrices — big_cbind","text":"","code":"big_cbind(A, B, C, quiet)"},{"path":"/reference/big_cbind.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a version of cbind() for file-backed matrices — big_cbind","text":"-memory data B file-backed data C file-backed placeholder combined data quiet Logical","code":""},{"path":"/reference/big_cbind.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"a version of cbind() for file-backed matrices — big_cbind","text":"C, filled column values B combined","code":""},{"path":"/reference/check_for_file_extension.html","id":null,"dir":"Reference","previous_headings":"","what":"check_for_file_extension: a function to make our package 'smart' enough to handle .rds file extensions — check_for_file_extension","title":"check_for_file_extension: a function to make our package 'smart' enough to handle .rds file extensions — check_for_file_extension","text":"check_for_file_extension: function make package 'smart' enough handle .rds file extensions","code":""},{"path":"/reference/check_for_file_extension.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"check_for_file_extension: a function to make our package 'smart' enough to handle .rds file extensions — check_for_file_extension","text":"","code":"check_for_file_extension(path)"},{"path":"/reference/check_for_file_extension.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"check_for_file_extension: a function to make our package 'smart' enough to handle .rds file extensions — check_for_file_extension","text":"path string specifying file path ends file name, e.g. \"~/dir/my_file.rds\"","code":""},{"path":"/reference/check_for_file_extension.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"check_for_file_extension: a function to make our package 'smart' enough to handle .rds file extensions — check_for_file_extension","text":"string filepath without extension, e.g. \"~/dir/my_file\"","code":""},{"path":"/reference/coef.cv_plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Coef method for ","title":"Coef method for ","text":"Coef method \"cv_plmm\" class","code":""},{"path":"/reference/coef.cv_plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coef method for ","text":"","code":"# S3 method for class 'cv_plmm' coef(object, lambda, which = object$min, ...)"},{"path":"/reference/coef.cv_plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coef method for ","text":"object object class \"cv_plmm.\" lambda numeric vector lambda values. Vector lambda indices coefficients return. Defaults lambda index minimum CVE. ... Additional arguments (used).","code":""},{"path":"/reference/coef.cv_plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coef method for ","text":"Returns named numeric vector. Values coefficients model specified value either lambda . Names values lambda.","code":""},{"path":"/reference/coef.cv_plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coef method for ","text":"","code":"cv_fit <- cv_plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) head(coef(cv_fit)) #> (Intercept)        Var1        Var2        Var3        Var4        Var5  #>  5.69945122 -0.22484261  0.00000000  3.24422663 -0.02824771  0.00000000"},{"path":"/reference/coef.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Coef method for ","title":"Coef method for ","text":"Coef method \"plmm\" class","code":""},{"path":"/reference/coef.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coef method for ","text":"","code":"# S3 method for class 'plmm' coef(object, lambda, which = 1:length(object$lambda), drop = TRUE, ...)"},{"path":"/reference/coef.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coef method for ","text":"object object class \"plmm.\" lambda numeric vector lambda values. Vector lambda indices coefficients return. drop Logical. ... Additional arguments.","code":""},{"path":"/reference/coef.plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coef method for ","text":"Either numeric matrix (model fit data stored memory) sparse matrix (model fit data stored filebacked). Rownames feature names, columns values lambda.","code":""},{"path":"/reference/coef.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coef method for ","text":"","code":"fit <- plmm(admix$X, admix$y) coef(fit)[1:10, 1:5] #>              0.42141  0.39301  0.36652  0.34182 0.31878 #> (Intercept) 4.145401 4.156508 4.162843 4.124933  4.1066 #> Snp1        0.000000 0.000000 0.000000 0.000000  0.0000 #> Snp2        0.000000 0.000000 0.000000 0.000000  0.0000 #> Snp3        0.000000 0.000000 0.000000 0.000000  0.0000 #> Snp4        0.000000 0.000000 0.000000 0.000000  0.0000 #> Snp5        0.000000 0.000000 0.000000 0.000000  0.0000 #> Snp6        0.000000 0.000000 0.000000 0.000000  0.0000 #> Snp7        0.000000 0.000000 0.000000 0.000000  0.0000 #> Snp8        0.000000 0.000000 0.000000 0.000000  0.0000 #> Snp9        0.000000 0.000000 0.000000 0.000000  0.0000"},{"path":"/reference/construct_variance.html","id":null,"dir":"Reference","previous_headings":"","what":"a function to create the estimated variance matrix from a PLMM fit — construct_variance","title":"a function to create the estimated variance matrix from a PLMM fit — construct_variance","text":"function create estimated variance matrix PLMM fit","code":""},{"path":"/reference/construct_variance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a function to create the estimated variance matrix from a PLMM fit — construct_variance","text":"","code":"construct_variance(fit, K = NULL, eta = NULL)"},{"path":"/reference/construct_variance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a function to create the estimated variance matrix from a PLMM fit — construct_variance","text":"fit object returned plmm() K optional matrix eta optional numeric value 0 1; fit supplied, option must specified.","code":""},{"path":"/reference/construct_variance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"a function to create the estimated variance matrix from a PLMM fit — construct_variance","text":"Sigma_hat, matrix representing estimated variance","code":""},{"path":"/reference/count_constant_features.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to count constant features — count_constant_features","title":"A helper function to count constant features — count_constant_features","text":"helper function count constant features","code":""},{"path":"/reference/count_constant_features.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to count constant features — count_constant_features","text":"","code":"count_constant_features(   fbm,   ind.row = bigstatsr::rows_along(fbm),   outfile,   quiet )"},{"path":"/reference/count_constant_features.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to count constant features — count_constant_features","text":"fbm FBM object, usually 'genotypes' component bigSNP list ind.row Optional indicators rows fbm. Default includes rows. outfile String specifying name log file quiet Logical: message printed console","code":""},{"path":"/reference/count_constant_features.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to count constant features — count_constant_features","text":"ns numeric vector indicesof non-singular columns matrix associated counts","code":""},{"path":"/reference/create_log.html","id":null,"dir":"Reference","previous_headings":"","what":"create_log_file — create_log","title":"create_log_file — create_log","text":"create_log_file","code":""},{"path":"/reference/create_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"create_log_file — create_log","text":"","code":"create_log(outfile, ...)"},{"path":"/reference/create_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"create_log_file — create_log","text":"outfile String specifying name --created file, without extension ... used","code":""},{"path":"/reference/cv_plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation for plmm — cv_plmm","title":"Cross-validation for plmm — cv_plmm","text":"Performs k-fold cross validation lasso-, MCP-, SCAD-penalized linear mixed models grid values regularization parameter lambda.","code":""},{"path":"/reference/cv_plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation for plmm — cv_plmm","text":"","code":"cv_plmm(   X,   y = NULL,   col_names = NULL,   non_genomic = NULL,   K = NULL,   diag_K = NULL,   eta_star = NULL,   penalty = \"lasso\",   penalty_factor = NULL,   type = \"blup\",   gamma,   alpha = 1,   lambda_min,   nlambda = 100,   lambda,   eps = 1e-04,   max_iter = 10000,   convex = TRUE,   dfmax = NULL,   warn = TRUE,   init = NULL,   cluster,   nfolds = 5,   seed,   fold = NULL,   returnY = FALSE,   returnBiasDetails = FALSE,   trace = FALSE,   save_rds = NULL,   save_fold_res = FALSE,   return_fit = TRUE,   compact_save = FALSE,   ... )"},{"path":"/reference/cv_plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation for plmm — cv_plmm","text":"X Design matrix model fitting. May include clinical covariates non-SNP data. y Continuous outcome vector. Defaults NULL, assuming outcome 6th column .fam PLINK file data. Can also user-supplied numeric vector. col_names Optional vector column names design matrix. Defaults NULL. non_genomic Optional vector specifying columns design matrix represent features genomic, features excluded empirical estimation genomic relatedness. cases X filepath object created process_plink(), handled automatically via arguments process_plink(). cases, 'non_genomic' defaults NULL (meaning plmm() assume columns X represent genomic features). K Similarity matrix used rotate data. either (1) known matrix reflects covariance y, (2) estimate (Default \\(\\frac{1}{p}(XX^T)\\)), (3) list components 'd' 'u', returned choose_k(). diag_K Logical: K diagonal matrix? reflect observations unrelated, can treated unrelated. Defaults FALSE. Note: plmm() check see matrix diagonal. want use diagonal K matrix, must set diag_K = TRUE. eta_star Optional argument input specific eta term rather estimate data. K known covariance matrix full rank, 1. penalty penalty applied model. Either \"lasso\" (default), \"SCAD\", \"MCP\". penalty_factor multiplicative factor penalty applied coefficient. supplied, penalty_factor must numeric vector length equal number columns X. purpose penalty_factor apply differential penalization coefficients thought likely others model. particular, penalty_factor can 0, case coefficient always model without shrinkage. type character argument indicating returned predict.plmm(). type == 'lp', predictions based linear predictor, X beta. type == 'blup', predictions based sum linear predictor estimated random effect (BLUP). Defaults 'blup', shown superior prediction method many applications. gamma tuning parameter MCP/SCAD penalty (see details). Default 3 MCP 3.7 SCAD. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. lambda_min smallest value lambda, fraction lambda.max. Default .001 number observations larger number covariates .05 otherwise. nlambda Length sequence lambda. Default 100. lambda user-specified sequence lambda values. default, sequence values length nlambda computed, equally spaced log scale. eps Convergence threshold. algorithm iterates RMSD change linear predictors coefficient less eps. Default 1e-4. max_iter Maximum number iterations (total across entire path). Default 10000. convex (future idea; yet incorporated) Calculate index objective function ceases locally convex? Default TRUE. dfmax (future idea; yet incorporated) Upper bound number nonzero coefficients. Default upper bound. However, large data sets, computational burden may heavy models large number nonzero coefficients. warn Return warning messages failures converge model saturation? Default TRUE. init Initial values coefficients. Default 0 columns X. cluster cv_plmm() can run parallel across cluster using parallel package. cluster must set advance using parallel::makeCluster(). cluster must passed cv_plmm(). nfolds number cross-validation folds. Default 5. seed may set seed random number generator order obtain reproducible results. fold fold observation belongs . default, observations randomly assigned. returnY cv_plmm() return linear predictors cross-validation folds? Default FALSE; TRUE, return matrix element row , column j fitted value observation fold observation excluded fit, jth value lambda. returnBiasDetails Logical: cross-validation bias (numeric value) loss (n x p matrix) returned? Defaults FALSE. trace set TRUE, inform user progress announcing beginning CV fold. Default FALSE. save_rds Optional: filepath name without '.rds' suffix specified (e.g., save_rds = \"~/dir/my_results\"), model results saved provided location (e.g., \"~/dir/my_results.rds\"). Defaults NULL, save result. save_fold_res Optional: logical value indicating whether results (loss predicted values) CV fold saved? TRUE, two '.rds' files saved ('loss' 'yhat') created directory 'save_rds'. files updated fold done. Defaults FALSE. return_fit Optional: logical value indicating whether fitted model returned plmm object current (assumed interactive) session. Defaults TRUE. compact_save Optional: TRUE, three separate .rds files saved: one 'beta_vals', one 'K', one everything else (see ). Defaults FALSE. Note: must specify save_rds argument called. ... Additional arguments plmm_fit","code":""},{"path":"/reference/cv_plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Cross-validation for plmm — cv_plmm","text":"list 11 items: type: type prediction used ('lp' 'blup') cve: numeric vector cross validation error (CVE) value lambda cvse: numeric vector estimated standard error associated value cve fold: numeric n length vector integers indicating fold observation assigned lambda: numeric vector lambda values fit: overall fit object, including predictors; list returned plmm() min: index corresponding value lambda minimizes cve lambda_min: lambda value cve minmized min1se: index corresponding value lambda within standard error minimizes cve lambda1se: largest value lambda error within 1 standard error minimum. null.dev: numeric value representing deviance intercept-model. supplied lambda sequence, quantity may meaningful.","code":""},{"path":"/reference/cv_plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Cross-validation for plmm — cv_plmm","text":"","code":"cv_fit <- cv_plmm(X = cbind(admix$race,admix$X), y = admix$y,  non_genomic = 1, penalty_factor = c(0, rep(1, ncol(admix$X)))) print(summary(cv_fit)) #> lasso-penalized model with n=197 and p=102 #> At minimum cross-validation error (lambda=0.1898): #> ------------------------------------------------- #>   Nonzero coefficients: 3 #>   Cross-validation error (deviance): 1.17 #>   Scale estimate (sigma): 1.083 plot(cv_fit)   # Note: for examples with filebacked data, see the filebacking vignette # https://pbreheny.github.io/plmmr/articles/filebacking.html"},{"path":"/reference/cvf.html","id":null,"dir":"Reference","previous_headings":"","what":"Cross-validation internal function for cv_plmm — cvf","title":"Cross-validation internal function for cv_plmm — cvf","text":"Internal function cv_plmm calls plmm fold subset original data.","code":""},{"path":"/reference/cvf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cross-validation internal function for cv_plmm — cvf","text":"","code":"cvf(i, fold, type, cv_args, estimated_Sigma, ...)"},{"path":"/reference/cvf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Cross-validation internal function for cv_plmm — cvf","text":"Fold number excluded fit. fold n-length vector fold-assignments. type character argument indicating returned predict.plmm. type == 'lp' predictions based linear predictor, $X beta$. type == 'individual' predictions based linear predictor plus estimated random effect (BLUP). cv_args List additional arguments passed plmm. estimated_Sigma Estimated variance-covariance matrix using observations computing BLUP; NULL type = \"lp\" cv_plmm. ... Optional arguments predict_within_cv","code":""},{"path":"/reference/delta.html","id":null,"dir":"Reference","previous_headings":"","what":"a helper function to calculate the 'distance' between 2 matrices — delta","title":"a helper function to calculate the 'distance' between 2 matrices — delta","text":"helper function calculate 'distance' 2 matrices","code":""},{"path":"/reference/delta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a helper function to calculate the 'distance' between 2 matrices — delta","text":"","code":"delta(A, B, type = \"F\")"},{"path":"/reference/delta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a helper function to calculate the 'distance' between 2 matrices — delta","text":"matrix compared B B second matrix (think approximation ) type String indicating type norm used. See Matrix::norm() details","code":""},{"path":"/reference/eigen_K.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to take the eigendecomposition of K Note: This is faster than taking SVD of X when p >> n — eigen_K","title":"A function to take the eigendecomposition of K Note: This is faster than taking SVD of X when p >> n — eigen_K","text":"function take eigendecomposition K Note: faster taking SVD X p >> n","code":""},{"path":"/reference/eigen_K.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to take the eigendecomposition of K Note: This is faster than taking SVD of X when p >> n — eigen_K","text":"","code":"eigen_K(std_X, fbm_flag, ...)"},{"path":"/reference/eigen_K.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to take the eigendecomposition of K Note: This is faster than taking SVD of X when p >> n — eigen_K","text":"std_X standardized design matrix, stored big.matrix object. fbm_flag Logical: std_X FBM obejct? Passed plmm(). ... Optional additional arguments bigstatsr::big_tcrossprodSelf(), note, one additional argument ind.col, used exclude unpenalized additional, non-genomic covariates (like sex, age, etc.) included calculation kinship.","code":""},{"path":"/reference/eigen_K.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to take the eigendecomposition of K Note: This is faster than taking SVD of X when p >> n — eigen_K","text":"list eigenvectors eigenvalues K","code":""},{"path":"/reference/estimate_eta.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate eta (to be used in rotating the data) This function is called internally by plmm() — estimate_eta","title":"Estimate eta (to be used in rotating the data) This function is called internally by plmm() — estimate_eta","text":"Estimate eta (used rotating data) function called internally plmm()","code":""},{"path":"/reference/estimate_eta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate eta (to be used in rotating the data) This function is called internally by plmm() — estimate_eta","text":"","code":"estimate_eta(n, s, U, y, eta_star)"},{"path":"/reference/estimate_eta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate eta (to be used in rotating the data) This function is called internally by plmm() — estimate_eta","text":"n number observations s singular values K, realized relationship matrix U left-singular vectors standardized design matrix y Continuous outcome vector.","code":""},{"path":"/reference/fbm2bm.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions to convert between FBM and big.matrix type objects — fbm2bm","title":"Functions to convert between FBM and big.matrix type objects — fbm2bm","text":"Functions convert FBM big.matrix type objects","code":""},{"path":"/reference/fbm2bm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions to convert between FBM and big.matrix type objects — fbm2bm","text":"","code":"fbm2bm(fbm, desc = FALSE)"},{"path":"/reference/fbm2bm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions to convert between FBM and big.matrix type objects — fbm2bm","text":"fbm FBM object; see bigstatsr::FBM() details desc Logical: descriptor file desired (opposed filebacked big matrix)? Defaults FALSE.","code":""},{"path":"/reference/fbm2bm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions to convert between FBM and big.matrix type objects — fbm2bm","text":"big.matrix - see bigmemory::filebacked.big.matrix() details","code":""},{"path":"/reference/fbm2bm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Functions to convert between FBM and big.matrix type objects — fbm2bm","text":"","code":"colon2 <- read.delim(find_example_data(\"colon2.txt\"), header = TRUE) class(colon2) #> [1] \"data.frame\" bigstatsr::as_FBM(colon2) -> colon2_fbm fbm2bm(colon2_fbm) -> colon2_bm class(colon2_bm) #> [1] \"big.matrix\" #> attr(,\"package\") #> [1] \"bigmemory\""},{"path":"/reference/file_sans_ext.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to get the file path of a file without the extension — file_sans_ext","title":"helper function to get the file path of a file without the extension — file_sans_ext","text":"helper function get file path file without extension","code":""},{"path":"/reference/file_sans_ext.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to get the file path of a file without the extension — file_sans_ext","text":"","code":"file_sans_ext(path)"},{"path":"/reference/file_sans_ext.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to get the file path of a file without the extension — file_sans_ext","text":"path path file","code":""},{"path":"/reference/file_sans_ext.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"helper function to get the file path of a file without the extension — file_sans_ext","text":"path_sans_ext filepath without extension","code":""},{"path":"/reference/find_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to help with accessing example PLINK files — find_example_data","title":"A function to help with accessing example PLINK files — find_example_data","text":"function help accessing example PLINK files","code":""},{"path":"/reference/find_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to help with accessing example PLINK files — find_example_data","text":"","code":"find_example_data(path, parent = FALSE)"},{"path":"/reference/find_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to help with accessing example PLINK files — find_example_data","text":"path Argument (string) specifying path (filename) external data file extdata/ parent path=TRUE user wants name parent directory file located, set parent=TRUE. Defaults FALSE.","code":""},{"path":"/reference/find_example_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to help with accessing example PLINK files — find_example_data","text":"path=NULL, character vector file names returned. path given, character string full file path","code":""},{"path":"/reference/get_bm_from_plink.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to convert the output of process_plink() into a big.matrix (such as could be passed to biglasso::biglasso()) — get_bm_from_plink","title":"A function to convert the output of process_plink() into a big.matrix (such as could be passed to biglasso::biglasso()) — get_bm_from_plink","text":"function convert output process_plink() big.matrix (passed biglasso::biglasso())","code":""},{"path":"/reference/get_bm_from_plink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to convert the output of process_plink() into a big.matrix (such as could be passed to biglasso::biglasso()) — get_bm_from_plink","text":"","code":"get_bm_from_plink(path, standardize = TRUE)"},{"path":"/reference/get_bm_from_plink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to convert the output of process_plink() into a big.matrix (such as could be passed to biglasso::biglasso()) — get_bm_from_plink","text":"path file path RDS object containing processed data. add '.rds' extension path. standardize Logical: data returned column-standardized form? Defaults TRUE. Please change unless super confident ...","code":""},{"path":"/reference/get_bm_from_plink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to convert the output of process_plink() into a big.matrix (such as could be passed to biglasso::biglasso()) — get_bm_from_plink","text":"list elements: 'X': big.matrix object design matrix data. standardize = TRUE, data corresponding std_X returned. Otherwise, data corresponding subset_X returned 'map': data frame .bim file information 'fam': data frame .fam file information 'ns': vector indicating columns X contain nonsingular features (.e., features variance != 0. 'center': standardize = TRUE, vector values centering column X returned 'scale': standardize = TRUE, vector values scaling column X returned","code":""},{"path":"/reference/get_bm_from_plink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A function to convert the output of process_plink() into a big.matrix (such as could be passed to biglasso::biglasso()) — get_bm_from_plink","text":"function wrapper combining get_data() fbm2bm()","code":""},{"path":"/reference/get_bm_from_plink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to convert the output of process_plink() into a big.matrix (such as could be passed to biglasso::biglasso()) — get_bm_from_plink","text":"","code":"if (FALSE) { # \\dontrun{ my_folder <- paste0(tempdir(),\"/\") # change this to be the directory of your choice...  process_plink(   data_dir = find_example_data(parent = TRUE), # assumes you have unzipped the data   rds_dir = my_folder,   prefix = \"penncath_lite\",   outfile = \"process_penncath\",   # overwrite = TRUE, # uncomment if needed   impute_method = \"mode\") # this takes a few seconds...    my_path <- paste0(my_folder, \"/std_penncath_lite\")   bm_data <- get_bm_from_plink(my_path)   str(bm_data) } # } # for more details and examples, see the article on analyzing filebacked data: # https://pbreheny.github.io/plmmr/articles/filebacking.html"},{"path":"/reference/get_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read in processed data This function is intended to be called after either process_plink() or process_delim() has been called once. — get_data","title":"Read in processed data This function is intended to be called after either process_plink() or process_delim() has been called once. — get_data","text":"Read processed data function intended called either process_plink() process_delim() called .","code":""},{"path":"/reference/get_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read in processed data This function is intended to be called after either process_plink() or process_delim() has been called once. — get_data","text":"","code":"get_data(path, returnX, trace = TRUE)"},{"path":"/reference/get_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read in processed data This function is intended to be called after either process_plink() or process_delim() has been called once. — get_data","text":"path file path RDS object containing processed data. add '.rds' extension path. returnX Logical: design matrix returned numeric matrix stored memory. default, FALSE object sizes exceeds 100 Mb. trace Logical: trace messages shown? Default TRUE.","code":""},{"path":"/reference/get_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read in processed data This function is intended to be called after either process_plink() or process_delim() has been called once. — get_data","text":"list components: std_X, column-standardized design matrix either (1) numeric matrix (2) filebacked matrix (FBM). See bigstatsr::FBM() bigsnpr::bigSnp-class documentation details. fam, data frame containing pedigree information (like .fam file PLINK) map, data frame containing feature information (like .bim file PLINK) ns: vector indicating columns X contain nonsingular features (.e., features variance != 0. center: vector values centering column X scale: vector values scaling column X","code":""},{"path":"/reference/get_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read in processed data This function is intended to be called after either process_plink() or process_delim() has been called once. — get_data","text":".rds object 'std_X' element - used design matrix analysis. design matrix include intercept column (added later plmm_fit()). returned list, fam data sorted family individual, dplyr::arrange(family.ID, sample.ID). rows X sorted align order fam, rownames X sample ID.","code":""},{"path":"/reference/get_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read in processed data This function is intended to be called after either process_plink() or process_delim() has been called once. — get_data","text":"","code":"# \\donttest{ temp_dir <- paste0(tempdir()) # using a temporary directory here process_plink(data_dir = find_example_data(parent = TRUE), # reads data that ships with plmmr               rds_dir = temp_dir,               prefix = \"penncath_lite\",               gz = TRUE,               outfile = \"process_penncath\",               overwrite = TRUE,               impute_method = \"mode\") #>  #> Logging to process_penncath.log #> Preprocessing penncath_lite data: #> It looks like your files are zipped -- please unzip them before calling process_plink(). #> Creating penncath_lite.rds #> Error: File '/home/runner/work/_temp/Library/plmmr/extdata/penncath_lite.bed' doesn't exist.   pen <- get_data(file.path(temp_dir, \"std_penncath_lite\")) #> Warning: cannot open compressed file '/tmp/Rtmpg8Do3i/std_penncath_lite.rds', probable reason 'No such file or directory' #> Error in gzfile(file, \"rb\"): cannot open the connection  str(pen) #> Error in eval(expr, envir, enclos): object 'pen' not found # }"},{"path":"/reference/get_hostname.html","id":null,"dir":"Reference","previous_headings":"","what":"a function to return the computer's host name — get_hostname","title":"a function to return the computer's host name — get_hostname","text":"function return computer's host name","code":""},{"path":"/reference/get_hostname.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a function to return the computer's host name — get_hostname","text":"","code":"get_hostname()"},{"path":"/reference/get_hostname.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"a function to return the computer's host name — get_hostname","text":"String hostname current machine","code":""},{"path":"/reference/handle_missingness.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to handle missing genotype values from PLINK data — handle_missingness","title":"A helper function to handle missing genotype values from PLINK data — handle_missingness","text":"helper function handle missing genotype values PLINK data","code":""},{"path":"/reference/handle_missingness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to handle missing genotype values from PLINK data — handle_missingness","text":"","code":"handle_missingness(   obj,   X,   counts,   na_phenotype_vals,   handle_missing_phen,   outfile,   quiet )"},{"path":"/reference/handle_missingness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to handle missing genotype values from PLINK data — handle_missingness","text":"obj bigSNP object X matrix genotype data  returned name_and_count_bigsnp counts dataframe created bigstatsr::big_counts() returned name_and_count_bigsnp na_phenotype_vals vector numeric values used code NA values phenotype/outcome ('affection' column bigSNP object, last column .fam file). Defaults -9 (matching PLINK conventions). handle_missing_phen string indicating missing phenotypes handled: \"prune\" (default): observations missing phenotype removed \"asis\": leaves missing phenotypes NA (fine outcome supplied later separate file) \"median\": impute missing phenotypes using median (warning: overly simplistic many cases). \"mean\": impute missing phenotypes using mean (warning: overly simplistic many cases). outfile Optional: name (character string) prefix logfile written. Defaults 'process_plink', .e. get 'process_plink.log' outfile. quiet Logical: messages printed console? Defaults TRUE","code":""},{"path":"/reference/handle_missingness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to handle missing genotype values from PLINK data — handle_missingness","text":"list two components: na_idx: logical vector indicating columns missing values prop_na: proportion missingness columns tagged 'na_idx'","code":""},{"path":"/reference/impute_snp_data.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to impute SNP data — impute_snp_data","title":"A function to impute SNP data — impute_snp_data","text":"function impute SNP data","code":""},{"path":"/reference/impute_snp_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to impute SNP data — impute_snp_data","text":"","code":"impute_snp_data(   obj,   X,   impute,   impute_method,   outfile,   quiet,   seed = as.numeric(Sys.Date()),   ... )"},{"path":"/reference/impute_snp_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to impute SNP data — impute_snp_data","text":"obj bigSNP object (created read_plink_files()) X matrix genotype data  returned name_and_count_bigsnp impute Logical: data imputed? Default TRUE. impute_method 'impute' = TRUE, argument specify kind imputation desired. Options : mode (default): Imputes frequent call. See bigsnpr::snp_fastImputeSimple() details. random: Imputes sampling according allele frequencies. mean0: Imputes rounded mean. mean2: Imputes mean rounded 2 decimal places. xgboost: Imputes using algorithm based local XGBoost models. See bigsnpr::snp_fastImpute() details. Note: can take several minutes, even relatively small data set. @param seed Numeric value passed seed impute_method = 'xgboost'. Defaults .numeric(Sys.Date()) \\@param outfile Optional: name (character string) prefix logfile written. Defaults 'process_plink', .e. get 'process_plink.log' outfile. quiet Logical: messages printed console? Defaults TRUE ... Optional: additional arguments bigsnpr::snp_fastImpute() (relevant impute_method = \"xgboost\")","code":""},{"path":"/reference/impute_snp_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to impute SNP data — impute_snp_data","text":"Nothing returned, obj$genotypes overwritten imputed version data","code":""},{"path":"/reference/index_std_X.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper function to index standardized data — index_std_X","title":"Helper function to index standardized data — index_std_X","text":"Helper function index standardized data","code":""},{"path":"/reference/index_std_X.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper function to index standardized data — index_std_X","text":"","code":"index_std_X(std_X_p, non_genomic)"},{"path":"/reference/index_std_X.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper function to index standardized data — index_std_X","text":"std_X_p number features standardized matrix data (may filebacked) non_genomic Integer vector columns std_X representing non-genomic data.","code":""},{"path":"/reference/index_std_X.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper function to index standardized data — index_std_X","text":"list indices","code":""},{"path":"/reference/lam_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate nicely formatted lambda vec — lam_names","title":"Generate nicely formatted lambda vec — lam_names","text":"Generate nicely formatted lambda vec","code":""},{"path":"/reference/lam_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate nicely formatted lambda vec — lam_names","text":"","code":"lam_names(l)"},{"path":"/reference/lam_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate nicely formatted lambda vec — lam_names","text":"l Vector lambda values.","code":""},{"path":"/reference/lam_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate nicely formatted lambda vec — lam_names","text":"character vector formatted lambda value names","code":""},{"path":"/reference/lasso.html","id":null,"dir":"Reference","previous_headings":"","what":"helper function to implement lasso penalty — lasso","title":"helper function to implement lasso penalty — lasso","text":"helper function implement lasso penalty","code":""},{"path":"/reference/lasso.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"helper function to implement lasso penalty — lasso","text":"","code":"lasso(z, l1, l2, v)"},{"path":"/reference/lasso.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"helper function to implement lasso penalty — lasso","text":"z solution active set feature l1 upper bound l2 lower bound v 'xtx' term","code":""},{"path":"/reference/log_lik.html","id":null,"dir":"Reference","previous_headings":"","what":"Evaluate the negative log-likelihood of an intercept-only Gaussian plmm model — log_lik","title":"Evaluate the negative log-likelihood of an intercept-only Gaussian plmm model — log_lik","text":"function allows evaluate negative log-likelihood linear mixed model assumption null model order estimate variance parameter, eta.","code":""},{"path":"/reference/log_lik.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Evaluate the negative log-likelihood of an intercept-only Gaussian plmm model — log_lik","text":"","code":"log_lik(eta, n, s, U, y, rot_y = NULL)"},{"path":"/reference/log_lik.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Evaluate the negative log-likelihood of an intercept-only Gaussian plmm model — log_lik","text":"eta proportion variance outcome attributable causal SNP effects. words, signal--noise ratio. n number observations s singular values K, realized relationship matrix U left-singular vectors standardized design matrix y Continuous outcome vector. rot_y Optional: y already rotated, can supplied. option designed log_lik() call within gic(), fit object supplied.","code":""},{"path":"/reference/name_and_count_bigsnp.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to label and summarize the contents of a bigSNP — name_and_count_bigsnp","title":"A helper function to label and summarize the contents of a bigSNP — name_and_count_bigsnp","text":"helper function label summarize contents bigSNP","code":""},{"path":"/reference/name_and_count_bigsnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to label and summarize the contents of a bigSNP — name_and_count_bigsnp","text":"","code":"name_and_count_bigsnp(obj, id_var, quiet, outfile)"},{"path":"/reference/name_and_count_bigsnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to label and summarize the contents of a bigSNP — name_and_count_bigsnp","text":"obj bigSNP object, possibly subset add_external_phenotype() id_var String specifying column PLINK .fam file unique sample identifiers. Options \"IID\" (default) \"FID\". quiet Logical: messages printed console? Defaults TRUE outfile string name .log file","code":""},{"path":"/reference/name_and_count_bigsnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to label and summarize the contents of a bigSNP — name_and_count_bigsnp","text":"list components: counts: column-wise summary minor allele counts 'genotypes' obj: modified bigSNP list additional components X: obj$genotypes FBM pos: obj$map$physical.pos vector","code":""},{"path":"/reference/pedigree.html","id":null,"dir":"Reference","previous_headings":"","what":"Pedigree: mock genotype data from a family-based design. — pedigree","title":"Pedigree: mock genotype data from a family-based design. — pedigree","text":"mock dataset containing genotypes, family relationships, continuous phenotype dataset inspired one T. Peter's collaborative projects involving analysis congenital disorders family-based data. outcome indicated severity phenotype, higher values -> severe.","code":""},{"path":"/reference/pedigree.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pedigree: mock genotype data from a family-based design. — pedigree","text":"","code":"pedigree"},{"path":[]},{"path":"/reference/pedigree.html","id":"pedigree","dir":"Reference","previous_headings":"","what":"pedigree","title":"Pedigree: mock genotype data from a family-based design. — pedigree","text":"list 3 components: X: Design matrix representing 23 family members 5 genes K: Matrix representing family members' relationships expected proportions genetic overlap. Values 0.5 represent parent-child sibling relationships; see data-raw/pedigree.R details. Note: correlation matrix. Use cov2cor() similar function obtain correlations. clinical: data frame 23 observations 3 variables: sample.id integer indicating sample.id (IID PLINK .fam file) sex biological sex participant (just like PLINK, 2 = female & 1 = male) y numeric value corresponding phenotype severity","code":""},{"path":"/reference/plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit a linear mixed model with non-convex regularization — plmm","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"function allows fit linear mixed model via non-convex penalized maximum likelihood. NB: function simply wrapper plmm_prep -> plmm_fit -> plmm_format","code":""},{"path":"/reference/plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"","code":"plmm(   X,   y = NULL,   col_names = NULL,   non_genomic = NULL,   K = NULL,   diag_K = NULL,   eta_star = NULL,   penalty = \"lasso\",   penalty_factor = NULL,   init = NULL,   gamma,   alpha = 1,   dfmax = NULL,   lambda_min,   nlambda = 100,   lambda,   eps = 1e-04,   max_iter = 10000,   convex = TRUE,   warn = TRUE,   trace = FALSE,   save_rds = NULL,   compact_save = FALSE,   return_fit = TRUE,   ... )"},{"path":"/reference/plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"X Design matrix object string file path design matrix. string, string passed get_data(). * Note: X may include clinical covariates non-SNP data, missing values allowed. y Numeric outcome vector. Defaults NULL, assuming outcome 6th column .fam PLINK file data. Can also user-supplied numeric vector. col_names Optional vector column names design matrix. Defaults NULL. cases X filepath object created process_plink(), handled automatically via arguments process_plink(). non_genomic Optional vector specifying columns design matrix represent features genomic, features excluded empirical estimation genomic relatedness. cases X filepath object created process_plink(), handled automatically via arguments process_plink(). cases, 'non_genomic' defaults NULL (meaning plmm() assume columns X represent genomic features). K Similarity matrix used rotate data. either : (1) known matrix reflects covariance y, (2) estimate (Default \\(\\frac{1}{p}(XX^T)\\)), (3) list components 'd' 'U', returned previous plmm() model fit data. diag_K Logical: K diagonal matrix? reflect observations unrelated, can treated unrelated. Defaults FALSE. Note: plmm() check see matrix diagonal. want use diagonal K matrix, must set diag_K = TRUE. eta_star Optional argument input specific eta term rather estimate data. K known covariance matrix full rank, 1. penalty penalty applied model. Either \"lasso\" (default), \"SCAD\", \"MCP\". penalty_factor multiplicative factor penalty applied coefficient. supplied, penalty_factor must numeric vector length equal number columns X. purpose penalty_factor apply differential penalization coefficients thought likely others model. particular, penalty_factor can 0, case coefficient always model without shrinkage. init Initial values coefficients. Default 0 columns X. gamma tuning parameter MCP/SCAD penalty (see details). Default 3 MCP 3.7 SCAD. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. dfmax (future idea; yet incorporated) Upper bound number nonzero coefficients. Default upper bound. However, large data sets, computational burden may heavy models large number nonzero coefficients. lambda_min smallest value lambda, fraction lambda.max. Default .001 number observations larger number covariates .05 otherwise. nlambda Length sequence lambda. Default 100. lambda user-specified sequence lambda values. default, sequence values length nlambda computed, equally spaced log scale. eps Convergence threshold. algorithm iterates RMSD change linear predictors coefficient less eps. Default 1e-4. max_iter Maximum number iterations (total across entire path). Default 10000. convex (future idea; yet incorporated)Calculate index objective function ceases locally convex? Default TRUE. warn Return warning messages failures converge model saturation? Default TRUE. trace set TRUE, inform user progress announcing beginning step modeling process. Default FALSE. save_rds Optional: filepath name without '.rds' suffix specified (e.g., save_rds = \"~/dir/my_results\"), model results saved provided location (e.g., \"~/dir/my_results.rds\"). Defaults NULL, save result. compact_save Optional: TRUE, three separate .rds files saved: one 'beta_vals', one 'K', one everything else (see ). Defaults FALSE. Note: must specify save_rds argument called. return_fit Optional: logical value indicating whether fitted model returned plmm object current (assumed interactive) session. Defaults TRUE. ... Additional optional arguments plmm_checks()","code":""},{"path":"/reference/plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"list includes: beta_vals: matrix estimated coefficients original scale. Rows predictors, columns values lambda rotated_scale_beta_vals: matrix estimated coefficients ~rotated~ scale. scale model fit. lambda: numeric vector lasso tuning parameter values used model fitting. eta: number (double) 0 1 representing estimated proportion variance outcome attributable population/correlation structure rot_y: vector outcome values rotated scale. scale model fit. linear_predictors: matrix resulting product stdrot_X estimated coefficients ~rotated~ scale. penalty: character string indicating penalty model fit (e.g., 'MCP') gamma: numeric value indicating tuning parameter used SCAD lasso penalties used. relevant lasso models. alpha: numeric value indicating elastic net tuning parameter. loss: vector numeric values loss value lambda (calculated ~rotated~ scale) penalty_factor: vector indicators corresponding predictor, 1 = predictor penalized. ns_idx: vector indices predictors constant features (.e., variation). p: number features n: number observations (instances) iter: numeric vector number iterations needed model fitting value lambda converged: vector logical values indicating whether model fitting converged value lambda K: list 2 elements, s U — s: vector eigenvalues genomic relatedness matrix; see relatedness_mat() details. U: matrix eigenvectors genomic relatedness matrix","code":""},{"path":"/reference/plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit a linear mixed model with non-convex regularization — plmm","text":"","code":"# using admix data fit_admix1 <- plmm(X = admix$X, y = admix$y) s1 <- summary(fit_admix1, idx = 50) print(s1) #> lasso-penalized regression model with n=197, p=101 at lambda=0.01380 #> ------------------------------------------------- #> The model converged  #> ------------------------------------------------- #> # of non-zero coefficients:  85  #> ------------------------------------------------- plot(fit_admix1)   # an example with p > n: fit_admix2 <- plmm(X = admix$X[1:50, ], y = admix$y[1:50]) s2 <- summary(fit_admix2, idx = 99) print(s2) #> lasso-penalized regression model with n=50, p=101 at lambda=0.0389 #> ------------------------------------------------- #> The model converged  #> ------------------------------------------------- #> # of non-zero coefficients:  40  #> ------------------------------------------------- plot(fit_admix2) # notice: the default penalty is MCP   # Note: for examples with large data that are too big to fit in memory, # see the article \"PLINK files/file-backed matrices\" on our website # https://pbreheny.github.io/plmmr/articles/filebacking.html"},{"path":"/reference/plmm_checks.html","id":null,"dir":"Reference","previous_headings":"","what":"plmm_checks — plmm_checks","title":"plmm_checks — plmm_checks","text":"plmm_checks","code":""},{"path":"/reference/plmm_checks.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"plmm_checks — plmm_checks","text":"","code":"plmm_checks(   X,   y = NULL,   col_names = NULL,   non_genomic = NULL,   K = NULL,   diag_K = NULL,   eta_star = NULL,   penalty = \"lasso\",   penalty_factor = NULL,   init = NULL,   gamma,   alpha = 1,   dfmax = NULL,   trace = FALSE,   save_rds = NULL,   return_fit = TRUE,   ... )"},{"path":"/reference/plmm_checks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"plmm_checks — plmm_checks","text":"X Design matrix object string file path design matrix. string, string passed get_data(). Note: X may include clinical covariates non-SNP data, missing values allowed. y Continuous outcome vector. Defaults NULL, assuming outcome 6th column .fam PLINK file data. Can also user-supplied numeric vector. col_names Optional vector column names design matrix. Defaults NULL. non_genomic Optional vector specifying columns design matrix represent features genomic, features excluded empirical estimation genomic relatedness. cases X filepath object created process_plink(), handled automatically via arguments process_plink(). cases, 'non_genomic' defaults NULL (meaning plmm() assume columns X represent genomic features). K Similarity matrix used rotate data. either (1) known matrix reflects covariance y, (2) estimate (Default \\(\\frac{1}{p}(XX^T)\\)), (3) list components 'd' 'u', returned choose_k(). diag_K Logical: K diagonal matrix? reflect observations unrelated, can treated unrelated. Defaults FALSE. Note: plmm() check see matrix diagonal. want use diagonal K matrix, must set diag_K = TRUE. eta_star Optional argument input specific eta term rather estimate data. K known covariance matrix full rank, 1. penalty penalty applied model. Either \"MCP\" (default), \"SCAD\", \"lasso\". penalty_factor multiplicative factor penalty applied coefficient. supplied, penalty_factor must numeric vector length equal number columns X. purpose penalty_factor apply differential penalization coefficients thought likely others model. particular, penalty_factor can 0, case coefficient always model without shrinkage. init Initial values coefficients. Default 0 columns X. gamma tuning parameter MCP/SCAD penalty (see details). Default 3 MCP 3.7 SCAD. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. dfmax Option added soon: Upper bound number nonzero coefficients. Default upper bound. However, large data sets, computational burden may heavy models large number nonzero coefficients. trace set TRUE, inform user progress announcing beginning step modeling process. Default FALSE. save_rds Optional: filepath name specified (e.g., save_rds = \"~/dir/my_results.rds\"), model results saved provided location. Defaults NULL, save result. return_fit Optional: logical value indicating whether fitted model returned plmm object current (assumed interactive) session. Defaults TRUE. ... Additional arguments get_data()","code":""},{"path":"/reference/plmm_fit.html","id":null,"dir":"Reference","previous_headings":"","what":"PLMM fit: a function that fits a PLMM using the values returned by plmm_prep() — plmm_fit","title":"PLMM fit: a function that fits a PLMM using the values returned by plmm_prep() — plmm_fit","text":"PLMM fit: function fits PLMM using values returned plmm_prep()","code":""},{"path":"/reference/plmm_fit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLMM fit: a function that fits a PLMM using the values returned by plmm_prep() — plmm_fit","text":"","code":"plmm_fit(   prep,   y,   std_X_details,   eta_star,   penalty_factor,   fbm_flag,   penalty,   gamma = 3,   alpha = 1,   lambda_min,   nlambda = 100,   lambda,   eps = 1e-04,   max_iter = 10000,   convex = TRUE,   dfmax = NULL,   init = NULL,   warn = TRUE,   returnX = TRUE,   ... )"},{"path":"/reference/plmm_fit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLMM fit: a function that fits a PLMM using the values returned by plmm_prep() — plmm_fit","text":"prep list returned plmm_prep y original (centered) outcome vector. Need intercept estimate std_X_details list components 'center' (values used center X), 'scale' (values used scale X), 'ns' (indices nonsignular columns X) eta_star ratio variances (passed plmm()) penalty_factor multiplicative factor penalty applied coefficient. supplied, penalty_factor must numeric vector length equal number columns X. purpose penalty_factor apply differential penalization coefficients thought likely others model. particular, penalty_factor can 0, case coefficient always model without shrinkage. fbm_flag Logical: std_X FBM object? Passed plmm(). penalty penalty applied model. Either \"MCP\" (default), \"SCAD\", \"lasso\". gamma tuning parameter MCP/SCAD penalty (see details). Default 3 MCP 3.7 SCAD. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. lambda_min smallest value lambda, fraction lambda.max. Default .001 number observations larger number covariates .05 otherwise. nlambda Length sequence lambda. Default 100. lambda user-specified sequence lambda values. default, sequence values length nlambda computed, equally spaced log scale. eps Convergence threshold. algorithm iterates RMSD change linear predictors coefficient less eps. Default 1e-4. max_iter Maximum number iterations (total across entire path). Default 10000. convex (future idea; yet incorporated) convex Calculate index objective function ceases locally convex? Default TRUE. dfmax (future idea; yet incorporated) Upper bound number nonzero coefficients. Default upper bound. However, large data sets, computational burden may heavy models large number nonzero coefficients. init Initial values coefficients. Default 0 columns X. warn Return warning messages failures converge model saturation? Default TRUE. returnX Return standardized design matrix along fit? default, option turned X 100 MB, turned larger matrices preserve memory. ... Additional arguments can passed biglasso::biglasso_simple_path()","code":""},{"path":"/reference/plmm_fit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLMM fit: a function that fits a PLMM using the values returned by plmm_prep() — plmm_fit","text":"list components: n: # rows X p: # columns X (including constant features) y: outcome original scale std_X_details: list 'center' 'scale' vectors, plmm_prep() s: eigenvalues K U: eigenvectors K rot_X: X rotated (.e., transformed) scale. Note dimensions rot_X likely different X. rot_y: y rotated scale stdrot_X: X rotated scale re-standardized. lambda: vector tuning parameter values stdrot_scale_beta: coefficients estimated scale stdrot_X std_scale_beta: coefficients estimated scale std_X linear_predictors: product stdrot_X b (linear predictors transformed restandardized scale) eta: number (double) 0 1 representing estimated proportion variance outcome attributable population/correlation structure. iter: numeric vector number iterations needed model fitting value lambda converged: vector logical values indicating whether model fitting converged value lambda loss: vector numeric values loss value lambda (calculated ~rotated~ scale) penalty: character string indicating penalty model fit (e.g., 'MCP') penalty_factor: vector indicators corresponding predictor, 1 = predictor penalized. gamma: numeric value indicating tuning parameter used SCAD lasso penalties used. relevant lasso models. alpha: numeric value indicating elastic net tuning parameter. ns: indices nonsingular values X feature_names: formatted column names design matrix nlambda: number lambda values used model fitting eps: tolerance ('epsilon') used model fitting max_iter: max. number iterations per model fit warn: logical - warnings given model fit converge? init: initial values model fitting trace: logical - messages printed console models fit?","code":""},{"path":"/reference/plmm_format.html","id":null,"dir":"Reference","previous_headings":"","what":"PLMM format: a function to format the output of a model constructed with plmm_fit — plmm_format","title":"PLMM format: a function to format the output of a model constructed with plmm_fit — plmm_format","text":"PLMM format: function format output model constructed plmm_fit","code":""},{"path":"/reference/plmm_format.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLMM format: a function to format the output of a model constructed with plmm_fit — plmm_format","text":"","code":"plmm_format(   fit,   p,   std_X_details,   fbm_flag,   use_feature_names = TRUE,   feature_names = NULL,   non_genomic = NULL )"},{"path":"/reference/plmm_format.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLMM format: a function to format the output of a model constructed with plmm_fit — plmm_format","text":"fit list parameters describing output model constructed plmm_fit p number features original data (including constant features) std_X_details list 3 items: 'center': centering values columns X 'scale': scaling values non-singular columns X 'ns': indicesof nonsingular columns std_X fbm_flag Logical: corresponding design matrix filebacked? Passed plmm(). use_feature_names Logical: features named (e.g., returned matrix coefficients rows/columns named?). Defaults TRUE. feature_names vector names features, passed internally names included data X passed plmm() non_genomic Optional vector specifying columns design matrix represent features genomic, features excluded empirical estimation genomic relatedness. cases X filepath object created process_plink(), handled automatically via arguments process_plink(). cases, 'non_genomic' defaults NULL (meaning plmm() assume columns X represent genomic features).","code":""},{"path":"/reference/plmm_format.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLMM format: a function to format the output of a model constructed with plmm_fit — plmm_format","text":"list components: beta_vals: matrix estimated coefficients original scale. Rows predictors, columns values lambda rotated_scale_beta_vals: matrix estimated coefficients ~rotated~ scale. scale model fit. lambda: numeric vector lasso tuning parameter values used model fitting. eta: number (double) 0 1 representing estimated proportion variance outcome attributable population/correlation structure. s: vectof eigenvalues relatedness matrix K; see relatedness_mat() details. U: matrix eigenvalues relatedness matrix K rot_y: vector outcome values rotated scale. scale model fit. linear_predictors: matrix resulting product stdrot_X estimated coefficients ~rotated~ scale. penalty: character string indicating penalty model fit (e.g., 'MCP') gamma: numeric value indicating tuning parameter used SCAD lasso penalties used. relevant lasso models. alpha: numeric value indicating elastic net tuning parameter. loss: vector numeric values loss value lambda (calculated ~rotated~ scale) penalty_factor: vector indicators corresponding predictor, 1 = predictor penalized. ns_idx: vector indicesof predictors constant features (.e., variation). p: number features n: number observations (instances) iter: numeric vector number iterations needed model fitting value lambda converged: vector logical values indicating whether model fitting converged value lambda","code":""},{"path":"/reference/plmm_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss method for ","title":"Loss method for ","text":"Loss method \"plmm\" class","code":""},{"path":"/reference/plmm_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss method for ","text":"","code":"plmm_loss(y, yhat)"},{"path":"/reference/plmm_loss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss method for ","text":"y Observed outcomes (response) vector yhat Predicted outcomes (response) vector","code":""},{"path":"/reference/plmm_loss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Loss method for ","text":"numeric vector squared-error loss values given observed predicted outcomes","code":""},{"path":"/reference/plmm_loss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Loss method for ","text":"","code":"fit <- plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) yhat <- predict(object = fit, newX = admix$X, type = 'lp', lambda = 0.05) head(plmm_loss(yhat = yhat, y = admix$y)) #>            [,1] #> [1,] 0.71821939 #> [2,] 0.06815981 #> [3,] 0.62117236 #> [4,] 0.16172510 #> [5,] 1.85950707 #> [6,] 2.54262183"},{"path":"/reference/plmm_prep.html","id":null,"dir":"Reference","previous_headings":"","what":"PLMM prep: a function to run checks, SVD, and rotation prior to fitting a PLMM model This is an internal function for cv_plmm — plmm_prep","title":"PLMM prep: a function to run checks, SVD, and rotation prior to fitting a PLMM model This is an internal function for cv_plmm — plmm_prep","text":"PLMM prep: function run checks, SVD, rotation prior fitting PLMM model internal function cv_plmm","code":""},{"path":"/reference/plmm_prep.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PLMM prep: a function to run checks, SVD, and rotation prior to fitting a PLMM model This is an internal function for cv_plmm — plmm_prep","text":"","code":"plmm_prep(   std_X,   std_X_n,   std_X_p,   genomic = 1:std_X_p,   n,   p,   centered_y,   k = NULL,   K = NULL,   diag_K = NULL,   eta_star = NULL,   fbm_flag,   penalty_factor = rep(1, ncol(std_X)),   trace = NULL,   ... )"},{"path":"/reference/plmm_prep.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PLMM prep: a function to run checks, SVD, and rotation prior to fitting a PLMM model This is an internal function for cv_plmm — plmm_prep","text":"std_X Column standardized design matrix. May include clinical covariates non-SNP data. std_X_n number observations std_X (integer) std_X_p number features std_X (integer) genomic numeric vector indices indicating columns standardized X genomic covariates. Defaults columns. n number instances original design matrix X. altered standardization. p number features original design matrix X, including constant features centered_y Continuous outcome vector, centered. k integer specifying number singular values used approximation rotated design matrix. argument passed RSpectra::svds(). Defaults min(n, p) - 1, n p dimensions standardized design matrix. K Similarity matrix used rotate data. either known matrix reflects covariance y, estimate (Default \\(\\frac{1}{p}(XX^T)\\), X standardized). can also list, components d u (returned choose_k) diag_K Logical: K diagonal matrix? reflect observations unrelated, can treated unrelated. Passed plmm(). eta_star Optional argument input specific eta term rather estimate data. K known covariance matrix full rank, 1. fbm_flag Logical: std_X FBM type object? set internally plmm(). trace set TRUE, inform user progress announcing beginning step modeling process. Default FALSE. ... used yet","code":""},{"path":"/reference/plmm_prep.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PLMM prep: a function to run checks, SVD, and rotation prior to fitting a PLMM model This is an internal function for cv_plmm — plmm_prep","text":"List components: n: number rows original design matrix p: number columns original design matrix centered_y: vector centered outcomes std_X: standardized design matrix std_X_details: list 2 vectors: 'center' (values used center X) 'scale' (values used scale X) s: vector eigenvalues K U: eigenvectors K (left singular values X). ns: indices nonsingular values X penalty_factor: penalty factors penalized non-singular values feature_names: formatted column names design matrix","code":""},{"path":"/reference/plmmr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"plmmr: Penalized Linear Mixed Models For Correlated Data — plmmr-package","title":"plmmr: Penalized Linear Mixed Models For Correlated Data — plmmr-package","text":"Fits penalized linear mixed models correct unobserved confounding factors. 'plmmr' infers corrects presence unobserved confounding effects population stratification environmental heterogeneity. fits linear model via penalized maximum likelihood. Originally designed multivariate analysis single nucleotide polymorphisms (SNPs) measured genome-wide association study (GWAS), 'plmmr' eliminates need subpopulation-specific analyses post-analysis p-value adjustments. Functions appropriate processing 'PLINK' files also supplied. examples, see package homepage. https://pbreheny.github.io/plmmr/.","code":""},{"path":"/reference/plmmr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"plmmr: Penalized Linear Mixed Models For Correlated Data — plmmr-package","text":"Maintainer: Patrick J. Breheny patrick-breheny@uiowa.edu (ORCID) Authors: Anna C. Reisetter anna-reisetter@uiowa.edu (ORCID) Tabitha K. Peter tabitha-peter@uiowa.edu (ORCID) Yujing Lu","code":""},{"path":"/reference/plot.cv_plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for cv_plmm class — plot.cv_plmm","title":"Plot method for cv_plmm class — plot.cv_plmm","text":"Plot method cv_plmm class","code":""},{"path":"/reference/plot.cv_plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for cv_plmm class — plot.cv_plmm","text":"","code":"# S3 method for class 'cv_plmm' plot(   x,   log.l = TRUE,   type = c(\"cve\", \"rsq\", \"scale\", \"snr\", \"all\"),   selected = TRUE,   vertical.line = TRUE,   col = \"red\",   ... )"},{"path":"/reference/plot.cv_plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for cv_plmm class — plot.cv_plmm","text":"x object class cv_plmm log.l Logical indicate plot returned natural log scale. Defaults log.l = FALSE. type Type plot return. Defaults \"cve.\" selected Logical indicate variables plotted. Defaults TRUE. vertical.line Logical indicate whether vertical line plotted minimum/maximum value. Defaults TRUE. col Color vertical line, plotted. Defaults \"red.\" ... Additional arguments.","code":""},{"path":"/reference/plot.cv_plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for cv_plmm class — plot.cv_plmm","text":"Nothing returned; instead, plot drawn representing relationship tuning parameter 'lambda' value (x-axis) cross validation error (y-axis).","code":""},{"path":"/reference/plot.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot method for plmm class — plot.plmm","title":"Plot method for plmm class — plot.plmm","text":"Plot method plmm class","code":""},{"path":"/reference/plot.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot method for plmm class — plot.plmm","text":"","code":"# S3 method for class 'plmm' plot(x, alpha = 1, log.l = FALSE, shade = TRUE, col, ...)"},{"path":"/reference/plot.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot method for plmm class — plot.plmm","text":"x object class plmm alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. log.l Logical indicate plot returned natural log scale. Defaults log.l = FALSE. shade Logical indicate whether local nonconvex region shaded. Defaults TRUE. col Vector colors coefficient lines. ... Additional arguments.","code":""},{"path":"/reference/plot.plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot method for plmm class — plot.plmm","text":"Nothing returned; instead, plot coefficient paths drawn value lambda (one 'path' value lambda).","code":""},{"path":"/reference/plot.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot method for plmm class — plot.plmm","text":"","code":"fit <- plmm(admix$X[,1:10], admix$y, nlambda = 10) # for the sake of illustration, I consider only 10 SNPs in the plot  plot(fit)   plot(fit, log.l = TRUE)"},{"path":"/reference/predict.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method for plmm class — predict.plmm","title":"Predict method for plmm class — predict.plmm","text":"Predict method plmm class","code":""},{"path":"/reference/predict.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method for plmm class — predict.plmm","text":"","code":"# S3 method for class 'plmm' predict(   object,   newX,   type = c(\"lp\", \"coefficients\", \"vars\", \"nvars\", \"blup\"),   lambda,   idx = 1:length(object$lambda),   X,   y,   ... )"},{"path":"/reference/predict.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method for plmm class — predict.plmm","text":"object object class plmm. newX Matrix values predictions made (used type=\"coefficients\" type settings predict). can either FBM object 'matrix' object. Note: Columns argument must named! type character argument indicating type prediction returned. Options \"lp,\" \"coefficients,\" \"vars,\" \"nvars,\" \"blup.\" See details. lambda numeric vector regularization parameter lambda values predictions requested. idx Vector indices penalty parameter lambda predictions required. default, indices returned. X Original design matrix (including intercept column) object. Required type == 'blup' object large returned plmm object. , columns must named! y Original continuous outcome vector object. Required type == 'blup'. ... Additional optional arguments","code":""},{"path":"/reference/predict.plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict method for plmm class — predict.plmm","text":"Depends type - see Details","code":""},{"path":"/reference/predict.plmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict method for plmm class — predict.plmm","text":"Define beta-hat coefficients estimated value lambda minimizes cross-validation error (CVE). options type follows: 'response' (default): uses product newX beta-hat predict new values outcome. incorporate correlation structure data. stats folks , simply linear predictor. 'blup' (acronym Best Linear Unbiased Predictor): adds 'response' value represents esetimated random effect. addition way incorporating estimated correlation structure data prediction outcome. 'coefficients': returns estimated beta-hat 'vars': returns indicies variables (e.g., SNPs) nonzero coefficients value lambda. EXCLUDES intercept. 'nvars': returns number variables (e.g., SNPs) nonzero coefficients value lambda. EXCLUDES intercept.","code":""},{"path":"/reference/predict.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict method for plmm class — predict.plmm","text":"","code":"set.seed(123) train_idx <- sample(1:nrow(admix$X), 100) # Note: ^ shuffling is important here! Keeps test and train groups comparable. train <- list(X = admix$X[train_idx,], y = admix$y[train_idx]) test <- list(X = admix$X[-train_idx,], y = admix$y[-train_idx]) fit <- plmm(X = train$X, y = train$y)  # make predictions for all lambda values  pred1 <- predict(object = fit, newX = test$X, type = \"blup\", X = train$X, y = train$y)  # look at mean squared prediction error mspe <- apply(pred1, 2, function(c){crossprod(test$y - c)/length(c)}) min(mspe) #> [1] 3.409887  # compare the MSPE of our model to a null model, for reference # null model = intercept only -> y_hat is always mean(y) crossprod(mean(test$y) - test$y)/length(test$y) #>          [,1] #> [1,] 6.381748"},{"path":"/reference/predict_within_cv.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict method to use in cross-validation (within cvf) — predict_within_cv","title":"Predict method to use in cross-validation (within cvf) — predict_within_cv","text":"Predict method use cross-validation (within cvf)","code":""},{"path":"/reference/predict_within_cv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict method to use in cross-validation (within cvf) — predict_within_cv","text":"","code":"predict_within_cv(   fit,   trainX,   trainY = NULL,   testX,   og_scale_beta,   std_X_details,   type,   fbm = FALSE,   idx = 1:length(fit$lambda),   Sigma_11 = NULL,   Sigma_21 = NULL,   ... )"},{"path":"/reference/predict_within_cv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict method to use in cross-validation (within cvf) — predict_within_cv","text":"fit list components returned plmm_fit. trainX training data, pre-standardization pre-rotation trainY training outcome, centered. needed type = 'blup' testX design matrix used computing predicted values (.e, test data). og_scale_beta testX scale original data, need beta_vals untransformed match scale. See plmm_fit() untransform() details. std_X_details list 3 items: 'center': centering values columns X 'scale': scaling values non-singular columns X 'ns': indicesof nonsingular columns std_X type character argument indicating type prediction returned. Passed cvf(), Options \"lp,\" \"coefficients,\" \"vars,\" \"nvars,\" \"blup.\" See details. fbm Logical: trainX FBM object? , function expects testX also FBM. two X matrices must stored way. idx Vector indices penalty parameter lambda predictions required. default, indices returned. Sigma_11 Variance-covariance matrix training data. Extracted estimated_Sigma generated using observations. Required type == 'blup'. Sigma_21 Covariance matrix training testing data. Extracted estimated_Sigma generated using observations. Required type == 'blup'. ... Additional optional arguments","code":""},{"path":"/reference/predict_within_cv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict method to use in cross-validation (within cvf) — predict_within_cv","text":"Define beta-hat coefficients estimated value lambda minimizes cross-validation error (CVE). options type follows: 'lp' (default): uses linear predictor (.e., product test data estimated coefficients) predict test values outcome. Note approach incorporate correlation structure data. 'blup' (acronym Best Linear Unbiased Predictor): adds 'lp' value represents estimated random effect. addition way incorporating estimated correlation structure data prediction outcome. Note: main difference function predict.plmm() method CV, predictions made standardized scale (.e., trainX testX data come std_X). predict.plmm() method makes predictions scale X (original scale)","code":""},{"path":"/reference/pretty_time.html","id":null,"dir":"Reference","previous_headings":"","what":"a function to format the time — pretty_time","title":"a function to format the time — pretty_time","text":"function format time","code":""},{"path":"/reference/pretty_time.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a function to format the time — pretty_time","text":"","code":"pretty_time()"},{"path":"/reference/print.summary.cv_plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for summary.cv_plmm objects — print.summary.cv_plmm","title":"Print method for summary.cv_plmm objects — print.summary.cv_plmm","text":"Print method summary.cv_plmm objects","code":""},{"path":"/reference/print.summary.cv_plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for summary.cv_plmm objects — print.summary.cv_plmm","text":"","code":"# S3 method for class 'summary.cv_plmm' print(x, digits, ...)"},{"path":"/reference/print.summary.cv_plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for summary.cv_plmm objects — print.summary.cv_plmm","text":"x object class summary.cv_plmm digits number digits use formatting output ... used","code":""},{"path":"/reference/print.summary.cv_plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print method for summary.cv_plmm objects — print.summary.cv_plmm","text":"Nothing returned; instead, message printed console summarizing results cross-validated model fit.","code":""},{"path":"/reference/print.summary.cv_plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print method for summary.cv_plmm objects — print.summary.cv_plmm","text":"","code":"cv_fit <- cv_plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) print(summary(cv_fit)) #> lasso-penalized model with n=197 and p=101 #> At minimum cross-validation error (lambda=0.0703): #> ------------------------------------------------- #>   Nonzero coefficients: 45 #>   Cross-validation error (deviance): 2.44 #>   Scale estimate (sigma): 1.561"},{"path":"/reference/print.summary.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to print the summary of a plmm model — print.summary.plmm","title":"A function to print the summary of a plmm model — print.summary.plmm","text":"function print summary plmm model","code":""},{"path":"/reference/print.summary.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to print the summary of a plmm model — print.summary.plmm","text":"","code":"# S3 method for class 'summary.plmm' print(x, ...)"},{"path":"/reference/print.summary.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to print the summary of a plmm model — print.summary.plmm","text":"x summary.plmm object ... used","code":""},{"path":"/reference/print.summary.plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to print the summary of a plmm model — print.summary.plmm","text":"Nothing returned; instead, message printed console summarizing results model fit.","code":""},{"path":"/reference/print.summary.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to print the summary of a plmm model — print.summary.plmm","text":"","code":"lam <- rev(seq(0.01, 1, length.out=20)) |> round(2) # for sake of example fit <- plmm(X = admix$X, y = admix$y, lambda = lam) fit2 <- plmm(X = admix$X, y = admix$y, penalty = \"SCAD\", lambda = lam) print(summary(fit, idx = 12)) #> lasso-penalized regression model with n=197, p=101 at lambda=0.4300 #> ------------------------------------------------- #> The model converged  #> ------------------------------------------------- #> # of non-zero coefficients:  0  #> ------------------------------------------------- print(summary(fit2, lambda = 0.11)) #> SCAD-penalized regression model with n=197, p=101 at lambda=0.1100 #> ------------------------------------------------- #> The model converged  #> ------------------------------------------------- #> # of non-zero coefficients:  28  #> -------------------------------------------------"},{"path":"/reference/process_delim.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to read in large data files as an FBM — process_delim","title":"A function to read in large data files as an FBM — process_delim","text":"function read large data files FBM","code":""},{"path":"/reference/process_delim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to read in large data files as an FBM — process_delim","text":"","code":"process_delim(   file,   data_dir,   rds_dir = data_dir,   bk_filename,   ind.col,   non_gen = NULL,   outfile,   overwrite = FALSE,   quiet = FALSE )"},{"path":"/reference/process_delim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to read in large data files as an FBM — process_delim","text":"file file read , without filepath. file numeric values, header row! Headers taken file supplied col_names argument plmm() Example: use file = \"myfile.txt\", file = \"~/mydirectory/myfile.txt\" data_dir directory file rds_dir directory user wants create '.rds' '.bk' files Defaults data_dir bk_filename Optional string name backingfile created output data. Defaults paste0(std_. prefix). Note: include .bk extension filename. ind.col Numeric vector columns read . use negative indicies. sure many columns file, use something like data.table::fread() examine first row two. non_gen Numeric vector indices columns non-genomic information. Note: plan estimating genomic relatedness among observations file, must include information order estimates correct. outfile Optional: name (character string) prefix logfile written. Defaults 'process_delim', .e. get 'process_delim.log' outfile. overwrite Optional: name (character string) prefix logfile written. Defaults 'process_plink', .e. get 'process_plink.log' outfile. Note: multiple .rds files names start \"std_prefix_...\", error . protect users accidentally deleting files saved results, one .rds file can removed option. quiet Logical: messages printed console silenced? Defaults FALSE.","code":""},{"path":"/reference/process_delim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to read in large data files as an FBM — process_delim","text":"Nothing returned function, (least) two files created location specified rds_dir: 'std_prefix.rds': bigsnpr::bigSNP object holds PLINK data along meta-data. See details explanation included meta-data 'std_prefix.bk': Created call standardize_fbm(), backingfile stores numeric data standardized design matrix std_X","code":""},{"path":"/reference/process_delim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to read in large data files as an FBM — process_delim","text":"","code":"temp_dir <- tempdir() process_delim(file = \"colon2.txt\",  data_dir = find_example_data(parent = TRUE),  rds_dir = temp_dir,   ind.col = 2:2002) #> Logging to /home/runner/work/_temp/Library/plmmr/extdata/process_data.log  #> Preprocessing colon2 data: #> There are 62 observations and 2001 features in the specified data files. #> There are a total of  20 features with missing values. #>  #>       At this time, plmmr::process_delim() does not impute missing values. We #>       are working to develop this feature. #>  #>       For now, plmmr::process_delim() will drop all columns of X with NA values. #> Column-standardizing the design matrix... #> Processed files now saved to: /tmp/Rtmpg8Do3i/std_colon2.rds at 2024-07-11 02:44:54 #> [1] \"/tmp/Rtmpg8Do3i/std_colon2.rds\"  # colon2_rds <- readRDS(paste0(temp_dir, \"std_colon2.rds\")) # str(colon2_rds)"},{"path":"/reference/process_plink.html","id":null,"dir":"Reference","previous_headings":"","what":"Preprocess PLINK files using the bigsnpr package — process_plink","title":"Preprocess PLINK files using the bigsnpr package — process_plink","text":"Preprocess PLINK files using bigsnpr package","code":""},{"path":"/reference/process_plink.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preprocess PLINK files using the bigsnpr package — process_plink","text":"","code":"process_plink(   data_dir,   prefix,   rds_dir = data_dir,   bk_filename,   impute = TRUE,   impute_method = \"mode\",   na_phenotype_vals = c(-9),   id_var = \"IID\",   handle_missing_phen = \"prune\",   add_phen = NULL,   pheno_id = NULL,   pheno_name = NULL,   quiet = FALSE,   outfile,   overwrite = FALSE,   add_predictor_fam = NULL,   add_predictor_ext = NULL,   ... )"},{"path":"/reference/process_plink.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preprocess PLINK files using the bigsnpr package — process_plink","text":"data_dir path bed/bim/fam data files, without trailing \"/\" (e.g., use data_dir = '~/my_dir', data_dir = '~/my_dir/') prefix prefix (character string) bed/fam data files (e.g., prefix = 'mydata') rds_dir path directory want create new '.rds' '.bk' files. Defaults data_dir bk_filename Optional string name backingfile created output data. Defaults paste0(std_. prefix). Note: include .bk extension filename. impute Logical: data imputed? Default TRUE. impute_method 'impute' = TRUE, argument specify kind imputation desired. Options : * mode (default): Imputes frequent call. See bigsnpr::snp_fastImputeSimple() details. * random: Imputes sampling according allele frequencies. * mean0: Imputes rounded mean. * mean2: Imputes mean rounded 2 decimal places. * xgboost: Imputes using algorithm based local XGBoost models. See bigsnpr::snp_fastImpute() details. Note: can take several minutes, even relatively small data set. na_phenotype_vals vector numeric values used code NA values phenotype/outcome ('affection' column bigSNP object, last column .fam file). Defaults -9 (matching PLINK conventions). id_var String specifying column PLINK .fam file unique sample identifiers. Options \"IID\" (default) \"FID\". handle_missing_phen string indicating missing phenotypes handled: * \"prune\" (default): observations missing phenotype removed * \"median\": impute missing phenotypes using median (warning: overly simplistic many cases). * \"mean\": impute missing phenotypes using mean (warning: overly simplistic many cases). Note: data coming PLINK, missing values phenotype allowed. (1) supply phenotype external file, (2) prune missing values, (3) impute missing values. add_phen Optional: data frame least two columns: ID column phenotype column pheno_id Optional: string specifying name ID column pheno. MUST specified add_phen specified. pheno_name Optional: string specifying name phenotype column pheno.  MUST specified add_phen specified. column used default y argument 'plmm()'. quiet Logical: messages printed console silenced? Defaults FALSE outfile Optional: name (character string) prefix logfile written. Defaults 'process_plink', .e. get 'process_plink.log' outfile, created directory 'data_dir'. overwrite Logical: existing .bk/.rds files exist specified directory/prefix, overwritten? Defaults FALSE. Set TRUE want change imputation method using, etc. Note: multiple .rds files names start \"std_prefix_...\", error . protect users accidentally deleting files saved results, one .rds file can removed option. add_predictor_fam Optional: want include \"sex\" (5th column .fam file) analysis, specify 'sex' . add_predictor_ext Optional: add additional covariates/predictors/features external file (.e., PLINK file). argument takes one two kinds arguments: - named numeric vector, names align sample IDs PLINK files. NA values can vector. names used subset align external covariate supplied PLINK data. NA values can matrix. - numeric matrix whose row names align sample IDs PLINK files. names used subset align external covariate supplied PLINK data. ... Optional: additional arguments bigsnpr::snp_fastImpute() (relevant impute_method = \"xgboost\")","code":""},{"path":"/reference/process_plink.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preprocess PLINK files using the bigsnpr package — process_plink","text":"Nothing returned function, (least) two files created location specified rds_dir: 'std_prefix.rds': bigsnpr::bigSNP object holds PLINK data along meta-data. See details explanation included meta-data 'std_prefix.bk': Created call standardize_fbm(), backingfile stores numeric data standardized design matrix std_X Note process_plink() need run given set PLINK files; subsequent data analysis/scripts, get_data() access '.rds' file.","code":""},{"path":"/reference/process_plink.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preprocess PLINK files using the bigsnpr package — process_plink","text":"'.rds' object created function following elements: std_X: file-backed design matrix, FBM object (see bigstatsr package info) fam: Data frame equivalent PLINK '.bim' file map: Data frame equivalent PLINK '.fam' file colnames: Character vector column names original data (includes constant features, .e. monomorphic SNPs) rownames: Character vector row names original data. n: Number rows (samples) original data p: Number columns (features, SNPs, markers, ...) original data ns: Numeric vector indices marking non-singular columns original data std_X_center: Numeric vector values used center non-singular columns data std_X_scale: Numeric vector values used scale non-singular columns data std_X_colnames: Character vector column names standardized data std_X_rownames: Character vector row names standardized data. complete_phen: Numeric vector indices marking samples non-missing phenotype. Ony applicable handle_missing_phen = 'prune' id_var: String specifying ID column '.fam' file unique sample ID: 'FID' (1st column) 'IID' (2nd column)","code":""},{"path":"/reference/process_plink.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preprocess PLINK files using the bigsnpr package — process_plink","text":"","code":"# \\donttest{ temp_dir <- paste0(tempdir()) # using a temporary directory here process_plink(data_dir = find_example_data(parent = TRUE), # reads data that ships with plmmr               rds_dir = temp_dir,               prefix = \"penncath_lite\",               outfile = \"process_penncath\",               overwrite = TRUE,               impute_method = \"mode\") #>  #> Logging to process_penncath.log #> Preprocessing penncath_lite data: #> It looks like your files are zipped -- please unzip them before calling process_plink(). #> Creating penncath_lite.rds #> Error: File '/home/runner/work/_temp/Library/plmmr/extdata/penncath_lite.bed' doesn't exist.   # pen <- get_data(file.path(temp_dir, \"std_penncath_lite\"))  # str(pen)  # }"},{"path":"/reference/read_data_files.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to read in a large file as a numeric file-backed matrix (FBM) Note: this function is a wrapper for bigstatsr::big_read() — read_data_files","title":"A function to read in a large file as a numeric file-backed matrix (FBM) Note: this function is a wrapper for bigstatsr::big_read() — read_data_files","text":"function read large file numeric file-backed matrix (FBM) Note: function wrapper bigstatsr::big_read()","code":""},{"path":"/reference/read_data_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to read in a large file as a numeric file-backed matrix (FBM) Note: this function is a wrapper for bigstatsr::big_read() — read_data_files","text":"","code":"read_data_files(file, data_dir, rds_dir, ind.col, outfile, overwrite, quiet)"},{"path":"/reference/read_data_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to read in a large file as a numeric file-backed matrix (FBM) Note: this function is a wrapper for bigstatsr::big_read() — read_data_files","text":"file name file read, including directory. Directory specified data_dir data_dir path directory 'file' rds_dir path directory want create new '.rds' '.bk' files. Defaults data_dir ind.col indices (positive integers) sorted ascending order. Passed bigstatsr::big_read() outfile Optional: name (character string) prefix logfile written. Defaults 'process_plink', .e. get 'process_plink.log' outfile. overwrite Logical: existing .bk/.rds files exist specified directory/prefix, overwritten? Defaults FALSE. Set TRUE want change imputation method using, etc. quiet Logical: messages printed console? Defaults TRUE","code":""},{"path":"/reference/read_data_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to read in a large file as a numeric file-backed matrix (FBM) Note: this function is a wrapper for bigstatsr::big_read() — read_data_files","text":"'.rds' '.bk' files created data_dir, obj (bigSNP object) returned. See bigsnpr documentation info bigSNP class.","code":""},{"path":"/reference/read_plink_files.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to read in PLINK files using bigsnpr methods — read_plink_files","title":"A function to read in PLINK files using bigsnpr methods — read_plink_files","text":"function read PLINK files using bigsnpr methods","code":""},{"path":"/reference/read_plink_files.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to read in PLINK files using bigsnpr methods — read_plink_files","text":"","code":"read_plink_files(data_dir, prefix, rds_dir, outfile, overwrite, quiet)"},{"path":"/reference/read_plink_files.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to read in PLINK files using bigsnpr methods — read_plink_files","text":"data_dir path bed/bim/fam data files, without trailing \"/\" (e.g., use data_dir = '~/my_dir', data_dir = '~/my_dir/') prefix prefix (character string) bed/fam data files (e.g., prefix = 'mydata') rds_dir path directory want create new '.rds' '.bk' files. Defaults data_dir outfile Optional: name (character string) prefix logfile written. Defaults 'process_plink', .e. get 'process_plink.log' outfile. overwrite Logical: existing .bk/.rds files exist specified directory/prefix, overwritten? Defaults FALSE. Set TRUE want change imputation method using, etc. quiet Logical: messages printed console? Defaults TRUE","code":""},{"path":"/reference/read_plink_files.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to read in PLINK files using bigsnpr methods — read_plink_files","text":"'.rds' '.bk' files created data_dir, obj (bigSNP object) returned. See bigsnpr documentation info bigSNP class.","code":""},{"path":"/reference/relatedness_mat.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a relatedness matrix — relatedness_mat","title":"Calculate a relatedness matrix — relatedness_mat","text":"function allows generate n n genetic relatedness matrix. numeric matrix supplied, RRM (Hayes, 2009) used computed XX'/p, X standardized.","code":""},{"path":"/reference/relatedness_mat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a relatedness matrix — relatedness_mat","text":"","code":"relatedness_mat(X, std = TRUE, fbm = FALSE, ns = NULL, ...)"},{"path":"/reference/relatedness_mat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a relatedness matrix — relatedness_mat","text":"X n x p numeric matrix genotypes (fully-imputed data). Note: matrix include non-genetic features. std Logical: X standardized? set FALSE, know exactly appropriate... standardization best practice, impact results. fbm Logical: X stored FBM? Defaults FALSE ns Optional vector values indicating indices nonsingular features ... optional arguments bigstatsr::bigapply() (like ncores = ...)","code":""},{"path":"/reference/relatedness_mat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a relatedness matrix — relatedness_mat","text":"n x n numeric matrix capturing genomic relatedness samples represented X. notation, call matrix K 'kinship'; matrix also sometimes called GRM 'genomic relatedness matrix'","code":""},{"path":"/reference/relatedness_mat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate a relatedness matrix — relatedness_mat","text":"","code":"RRM <- relatedness_mat(X = admix$X)"},{"path":"/reference/rotate_filebacked.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to rotate filebacked data — rotate_filebacked","title":"A function to rotate filebacked data — rotate_filebacked","text":"function rotate filebacked data","code":""},{"path":"/reference/rotate_filebacked.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to rotate filebacked data — rotate_filebacked","text":"","code":"rotate_filebacked(prep, ...)"},{"path":"/reference/rotate_filebacked.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to rotate filebacked data — rotate_filebacked","text":"list 4 items: rot_X\" X rotated scale, without re-standardizing (FBM) rot_y: y rotated scale (numeric vector) stdrot_X: X rotated scale, re-standardized (FBM) stdrot_X_scale: numeric vector values used standardize rot_X","code":""},{"path":"/reference/setup_lambda.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute sequence of lambda values — setup_lambda","title":"Compute sequence of lambda values — setup_lambda","text":"function allows compute sequence lambda values plmm models.","code":""},{"path":"/reference/setup_lambda.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute sequence of lambda values — setup_lambda","text":"","code":"setup_lambda(   X,   y,   alpha,   lambda_min,   nlambda,   penalty_factor,   intercept = TRUE )"},{"path":"/reference/setup_lambda.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute sequence of lambda values — setup_lambda","text":"X Rotated standardized design matrix includes intercept column present. May include clinical covariates non-SNP data. can either 'matrix' 'FBM' object. y Continuous outcome vector. alpha Tuning parameter Mnet estimator controls relative contributions MCP/SCAD penalty ridge, L2 penalty. alpha=1 equivalent MCP/SCAD penalty, alpha=0 equivalent ridge regression. However, alpha=0 supported; alpha may arbitrarily small, exactly 0. lambda_min smallest value lambda, fraction lambda.max. Default .001 number observations larger number covariates .05 otherwise. value lambda_min = 0 supported. nlambda desired number lambda values sequence generated. penalty_factor multiplicative factor penalty applied coefficient. supplied, penalty_factor must numeric vector length equal number columns X. purpose penalty_factor apply differential penalization coefficients thought likely others model. particular, penalty_factor can 0, case coefficient always model without shrinkage. intercept Logical: X contain intercept column? Defaults TRUE.","code":""},{"path":"/reference/standardize_bigsnp.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to standardize a bigSNP — standardize_bigsnp","title":"A helper function to standardize a bigSNP — standardize_bigsnp","text":"helper function standardize bigSNP","code":""},{"path":"/reference/standardize_bigsnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to standardize a bigSNP — standardize_bigsnp","text":"","code":"standardize_bigsnp(   obj,   prefix,   rds_dir,   non_gen,   complete_phen,   id_var,   outfile,   quiet,   overwrite )"},{"path":"/reference/standardize_bigsnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to standardize a bigSNP — standardize_bigsnp","text":"obj bigSNP object prefix prefix (character string) bed/fam data files (e.g., prefix = 'mydata') rds_dir path directory want create new '.rds' '.bk' files. Defaults data_dir non_gen integer vector ranges 1 number added predictors. Example: 2 predictors added, non_gen = 1:2. Note: typically passed result add_predictors() complete_phen Numeric vector indicesmarking rows original data non-missing entry 6th column .fam file id_var String specifying column PLINK .fam file unique sample identifiers. Options \"IID\" (default) \"FID\". outfile Optional: name (character string) prefix logfile written. Defaults 'process_plink', .e. get 'process_plink.log' outfile. quiet Logical: messages printed console? Defaults TRUE overwrite Logical: existing .bk/.rds files exist specified directory/prefix, overwritten?","code":""},{"path":"/reference/standardize_bigsnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to standardize a bigSNP — standardize_bigsnp","text":"list new component obj called 'std_X' - FBM column-standardized data. List also includes several indices/meta-data standardized matrix","code":""},{"path":"/reference/standardize_fbm.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to standardize an FBM — standardize_fbm","title":"A helper function to standardize an FBM — standardize_fbm","text":"helper function standardize FBM","code":""},{"path":"/reference/standardize_fbm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to standardize an FBM — standardize_fbm","text":"","code":"standardize_fbm(subset_X, prefix, rds_dir, ns, non_gen, outfile, quiet)"},{"path":"/reference/standardize_fbm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to standardize an FBM — standardize_fbm","text":"subset_X FBM prefix data file name without extension rds_dir directory user wants create '.rds' '.bk' files ns Integer vector indices non-singular columns subset_X non_gen Integer vector indices non-genomic covariates outfile Optional: name (character string) prefix logfile written. quiet Logical: messages printed console silenced? Defaults FALSE.","code":""},{"path":"/reference/standardize_fbm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to standardize an FBM — standardize_fbm","text":"list includes: 'std_X' - standardized FBM 'center' - vector  values used center columns 'scale' - vector values used scale columns","code":""},{"path":"/reference/standardize_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to standardize matrices — standardize_matrix","title":"A helper function to standardize matrices — standardize_matrix","text":"helper function standardize matrices","code":""},{"path":"/reference/standardize_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to standardize matrices — standardize_matrix","text":"","code":"standardize_matrix(X, penalty_factor)"},{"path":"/reference/standardize_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to standardize matrices — standardize_matrix","text":"X matrix penalty_factor vector 0s 1s, passed plmm()","code":""},{"path":"/reference/standardize_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to standardize matrices — standardize_matrix","text":"list standardized matrix details","code":""},{"path":"/reference/subset_bigsnp.html","id":null,"dir":"Reference","previous_headings":"","what":"A helper function to subset bigSNP objects — subset_bigsnp","title":"A helper function to subset bigSNP objects — subset_bigsnp","text":"helper function subset bigSNP objects","code":""},{"path":"/reference/subset_bigsnp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A helper function to subset bigSNP objects — subset_bigsnp","text":"","code":"subset_bigsnp(   obj,   counts,   handle_missing_phen,   complete_phen,   non_gen,   data_dir,   rds_dir,   prefix,   bk_filename,   outfile,   quiet )"},{"path":"/reference/subset_bigsnp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A helper function to subset bigSNP objects — subset_bigsnp","text":"obj bigSNP object counts dataframe returned bigstatsr::big_counts() handle_missing_phen string indicating missing phenotypes handled: \"prune\" (default): observations missing phenotype removed \"asis\": leaves missing phenotypes NA (fine outcome supplied later separate file) \"median\": impute missing phenotypes using median (warning: overly simplistic many cases). \"mean\": impute missing phenotypes using mean (warning: overly simplistic many cases). complete_phen Numeric vector indicesmarking rows original data non-missing entry 6th column .fam file non_gen integer vector ranges 1 number added predictors. Example: 2 predictors added, non_gen = 1:2. Note: typically passed result add_predictors() data_dir path bed/bim/fam data files, without trailing \"/\" (e.g., use data_dir = '~/my_dir', data_dir = '~/my_dir/') rds_dir path directory want create new '.rds' '.bk' files. Defaults data_dir prefix prefix (character string) bed/fam data files (e.g., prefix = 'mydata') bk_filename Optional string name backingfile created output data. Defaults paste0(std_. prefix). Note: include .bk extension filename. outfile Optional: name (character string) prefix logfile written. Defaults 'process_plink', .e. get 'process_plink.log' outfile. quiet Logical: messages printed console? Defaults TRUE","code":""},{"path":"/reference/subset_bigsnp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A helper function to subset bigSNP objects — subset_bigsnp","text":"bigSNP object includes new component, 'subset_X', representing design matrix wherein: rows subset according user's specification handle_missing_phen columns subset constant features remain – important standardization downstream new 'obj' also includes integer vector 'ns' marks columns original matrix 'non-singular' (.e. constant features). 'ns' index plays important role plmm_format() untransform() (helper functions model fitting)","code":""},{"path":"/reference/summary.cv_plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"A summary function for cv_plmm objects — summary.cv_plmm","title":"A summary function for cv_plmm objects — summary.cv_plmm","text":"summary function cv_plmm objects","code":""},{"path":"/reference/summary.cv_plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A summary function for cv_plmm objects — summary.cv_plmm","text":"","code":"# S3 method for class 'cv_plmm' summary(object, lambda = \"min\", ...)"},{"path":"/reference/summary.cv_plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A summary function for cv_plmm objects — summary.cv_plmm","text":"object cv_plmm object lambda regularization parameter value inference reported. Can choose numeric value, 'min', '1se'. Defaults 'min.' ... used","code":""},{"path":"/reference/summary.cv_plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A summary function for cv_plmm objects — summary.cv_plmm","text":"return value object S3 class summary.cv_plmm. class print method contains following list elements: lambda_min: lambda value minimum cross validation error lambda.1se: maximum lambda value within 1 standard error minimum cross validation error penalty: penalty applied fitted model nvars: number non-zero coefficients selected lambda value cve: cross validation error folds min: minimum cross validation error fit: plmm fit used cross validation returnBiasDetails = TRUE, two items returned: bias: mean bias cross validation loss: loss value lambda","code":""},{"path":"/reference/summary.cv_plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A summary function for cv_plmm objects — summary.cv_plmm","text":"","code":"cv_fit <- cv_plmm(X = admix$X, y = admix$y,  K = relatedness_mat(admix$X), penalty = 'lasso', returnBiasDetails = TRUE) summary(cv_fit) #> lasso-penalized model with n=197 and p=101 #> At minimum cross-validation error (lambda=0.0655): #> ------------------------------------------------- #>   Nonzero coefficients: 46 #>   Cross-validation error (deviance): 2.35 #>   Scale estimate (sigma): 1.532"},{"path":"/reference/summary.plmm.html","id":null,"dir":"Reference","previous_headings":"","what":"A summary method for the plmm objects — summary.plmm","title":"A summary method for the plmm objects — summary.plmm","text":"summary method plmm objects","code":""},{"path":"/reference/summary.plmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A summary method for the plmm objects — summary.plmm","text":"","code":"# S3 method for class 'plmm' summary(object, lambda, idx, eps = 1e-05, ...)"},{"path":"/reference/summary.plmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A summary method for the plmm objects — summary.plmm","text":"object object class plmm lambda regularization parameter value inference reported. idx Alternatively, lambda may specified index; idx=10 means: report inference 10th value lambda along regularization path. lambda idx specified, lambda takes precedence. eps lambda given, eps tolerance difference given lambda value lambda value object. Defaults 0.0001 (1e-5) ... used","code":""},{"path":"/reference/summary.plmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A summary method for the plmm objects — summary.plmm","text":"return value object S3 class summary.plmm. class print method contains following list elements: penalty: penalty used plmm (e.g. SCAD, MCP, lasso) n: Number instances/observations p: Number regression coefficients (including intercept) converged: Logical indicator whether model converged lambda: lambda value inference reported lambda_char: formatted character string indicating lambda value nvars: number nonzero coefficients (, including intercept) value lambda nonzero: column names indicating nonzero coefficients model specified value lambda constant_features: character vector names columns design matrix whose values constant whole sample (e.g., monomorphic SNPs genetics context)","code":""},{"path":"/reference/summary.plmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A summary method for the plmm objects — summary.plmm","text":"","code":"fit <- cv_plmm(X = admix$X, y = admix$y, K = relatedness_mat(admix$X)) summary(fit$fit, idx = 97) #> lasso-penalized regression model with n=197, p=101 at lambda=0.0020 #> ------------------------------------------------- #> The model converged  #> ------------------------------------------------- #> # of non-zero coefficients:  97  #> ------------------------------------------------- summary(fit, lambda = fit$lambda_min) #> lasso-penalized model with n=197 and p=101 #> At minimum cross-validation error (lambda=0.0655): #> ------------------------------------------------- #>   Nonzero coefficients: 46 #>   Cross-validation error (deviance): 2.25 #>   Scale estimate (sigma): 1.501"},{"path":"/reference/untransform.html","id":null,"dir":"Reference","previous_headings":"","what":"Untransform coefficient values back to the original scale — untransform","title":"Untransform coefficient values back to the original scale — untransform","text":"function unwinds initial standardization data obtain coefficient values original scale. called plmm_format().","code":""},{"path":"/reference/untransform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Untransform coefficient values back to the original scale — untransform","text":"","code":"untransform(std_scale_beta, p, std_X_details, fbm_flag, non_genomic)"},{"path":"/reference/untransform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Untransform coefficient values back to the original scale — untransform","text":"std_scale_beta estimated coefficients standardized scale p number columns original design matrix std_X_details list 3 elements describing standardized design matrix rotation; elements 'scale', 'center', 'ns' fbm_flag Logical: corresponding design matrix filebacked? non_genomic Optional vector specifying columns design matrix represent features genomic, features excluded empirical estimation genomic relatedness. cases X filepath object created process_plink(), handled automatically via arguments process_plink(). cases, 'non_genomic' defaults NULL (meaning plmm() assume columns X represent genomic features).","code":""},{"path":"/reference/unzip_example_data.html","id":null,"dir":"Reference","previous_headings":"","what":"a companion function to unzip the .gz files that ship with the package Note: for Linux/Unix and MacOS only — unzip_example_data","title":"a companion function to unzip the .gz files that ship with the package Note: for Linux/Unix and MacOS only — unzip_example_data","text":"companion function unzip .gz files ship package Note: Linux/Unix MacOS ","code":""},{"path":"/reference/unzip_example_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"a companion function to unzip the .gz files that ship with the package Note: for Linux/Unix and MacOS only — unzip_example_data","text":"","code":"unzip_example_data(outdir)"},{"path":"/reference/unzip_example_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"a companion function to unzip the .gz files that ship with the package Note: for Linux/Unix and MacOS only — unzip_example_data","text":"outdir file path directory .gz files written","code":""},{"path":"/reference/varp.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate the population variance — varp","title":"Calculate the population variance — varp","text":"function allows calculate population variance; assume sample population.","code":""},{"path":"/reference/varp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate the population variance — varp","text":"","code":"varp(x)"},{"path":"/reference/varp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate the population variance — varp","text":"x numeric vector","code":""},{"path":[]},{"path":[]},{"path":"/news/index.html","id":"id_310-3-1-0","dir":"Changelog","previous_headings":"","what":"3.1.0","title":"plmmr 3.1.0","text":"Enhancement: make plmmr better functionality writing scripts, functions process_plink(), plmmm(), cv_plmm() now write ‘.log’ files time called. design log files based behavior PLINK software. Enhancement: cases users working large datasets, may practical desirable results returned plmmm() cv_plmm() saved single ‘.rds’ file. now option model fitting functions called ‘compact_save’, gives users option save output multiple, smaller ‘.rds’ files. Argument removed: Previously, functions plmmm() cv_plmm() argument ‘std_needed’ allowed users ‘turn ’ standardization. worked thought , realized package isn’t mature enough yet handle complex, nuanced option. option removed now – may add back later.","code":""},{"path":"/news/index.html","id":"id_300-3-1-0","dir":"Changelog","previous_headings":"","what":"3.0.0","title":"plmmr 3.1.0","text":"Bug fix: June 27, 2024, addressed issues cross-validation implementation. Previously, using eigenvalues estimated η̂\\hat\\eta CV fold – consistent best practices CV implementation, information outside given fold inform predictions.1 update, modeling steps carried fold: standardization, eigendecomposition relatedness matrix, model fitting, backtransformation onto original scale prediction. may way make eigendecomposition step faster – question actively studying. Computational speedup: standardization rotation filebacked data now much faster; moved toward using methods bigalgebra bigmemory computations. Methods development (nerds): derived standardized scale, intercept PLMM mean outcome. mind, updated way handle intercept model fitting – made code internal functions ‘readable’.","code":""},{"path":"/news/index.html","id":"plmmr-221","dir":"Changelog","previous_headings":"","what":"plmmr 2.2.1","title":"plmmr 2.2.1","text":"Notable changes Changed package name plmmr - note plmm(), cv_plmm(), functions starting plmm_ changed names.","code":""}]
